import{a as t,c as a,b as o,o as r}from"./app-CAzY0Upz.js";const d={};function c(s,e){return r(),a("div",null,e[0]||(e[0]=[o('<p>Java 泛型是 Java 语言中一项重要的特性，于 JDK 5 引入。它允许在定义类、接口或方法时声明类型参数，这些参数在使用时由具体类型实例化。泛型机制通过类型参数化，提升了代码的灵活性和安全性。</p><h2 id="泛型的概念" tabindex="-1"><a class="header-anchor" href="#泛型的概念"><span>泛型的概念</span></a></h2><p>泛型是一种参数化类型机制，即在定义类、接口或方法时使用类型变量（如 <code>&lt;T&gt;</code>），这些变量在实例化时被具体类型（如 <code>String</code> 或 <code>Integer</code>）替换。</p><p>例如，定义一个泛型类 <code>List&lt;T&gt;</code> 后，使用时可以指定 <code>List&lt;String&gt;</code>，编译器会确保所有操作都基于 <code>String</code> 类型。</p><h2 id="使用泛型的好处" tabindex="-1"><a class="header-anchor" href="#使用泛型的好处"><span>使用泛型的好处</span></a></h2><p>泛型的主要优势包括类型安全和代码复用：</p><ul><li><strong>类型安全</strong>： <ul><li><strong>问题描述：</strong> 在没有泛型之前，集合类（如 <code>java.util.ArrayList</code>）默认存储的是 <code>Object</code> 类型的元素。从集合中取出元素时，需要进行强制类型转换。这种转换在编译时无法检查，这可能导致运行时错误（如 <code>ClassCastException</code>）。</li><li><strong>解决方案：</strong> 泛型在编译阶段对类型进行严格检查。它确保只有符合泛型声明的特定类型的对象才能被添加到集合中，从而避免了在运行时出现不必要的类型转换错误，提高了程序的健壮性。</li></ul></li><li><strong>代码复用</strong>： 泛型允许为多种数据类型编写通用逻辑，减少代码冗余。例如，一个泛型方法 <code>public &lt;T&gt; void sort(List&lt;T&gt; list)</code> 可处理任意类型的列表，无需为每种类型重写相同逻辑，显著提升代码可维护性和复用性。</li></ul><h2 id="类型擦除" tabindex="-1"><a class="header-anchor" href="#类型擦除"><span>类型擦除</span></a></h2><p>类型擦除指编译器在编译阶段将泛型代码中的类型参数信息“擦除”，替换为原生类型（如 <code>Object</code> 或指定边界类型），生成的字节码中不再保留泛型类型信息。例如，泛型类 <code>List&lt;T&gt;</code> 在编译后等同于非泛型 <code>List</code>，所有类型参数被替换为 <code>Object</code>。泛型类型检查仅在编译阶段执行，运行时无法获取泛型信息。</p><h5 id="类型擦除的原因" tabindex="-1"><a class="header-anchor" href="#类型擦除的原因"><span>类型擦除的原因</span></a></h5><p>Java 引入泛型时（JDK 5），面临关键兼容性问题：需确保新泛型代码能在旧版本 JVM（不支持泛型）上运行，同时允许非泛型代码（如 Java 5 前的 <code>ArrayList</code>）与泛型代码互操作。类型擦除是实现这一目标的妥协方案：</p><ul><li><strong>向后兼容性</strong>：类型擦除使泛型代码编译后与原生代码一致，无需修改 JVM 即可在旧环境运行。</li><li><strong>互操作性</strong>：非泛型代码可直接使用泛型集合（如 <code>List list = new ArrayList&lt;String&gt;()</code>），编译器通过警告而非错误处理类型不匹配，确保代码库平滑过渡。</li></ul>',12)]))}const n=t(d,[["render",c]]),l=JSON.parse('{"path":"/notes/interview/dz07uuhl/","title":"泛型","lang":"zh-CN","frontmatter":{"title":"泛型","createTime":"2025/09/03 18:26:53","permalink":"/notes/interview/dz07uuhl/"},"readingTime":{"minutes":2.44,"words":731},"git":{"createdTime":1757065260000,"updatedTime":1757065260000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/Java基础/泛型.md","headers":[]}');export{n as comp,l as data};
