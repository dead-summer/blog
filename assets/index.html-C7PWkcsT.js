import{a as i,c as a,b as e,o as n}from"./app-CAzY0Upz.js";const l={};function t(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<p>在面向对象编程中，成员变量和局部变量是两个重要的概念，理解它们的区别对于编写高质量的代码至关重要。</p><h2 id="_10-1-定义位置" tabindex="-1"><a class="header-anchor" href="#_10-1-定义位置"><span>10.1 定义位置</span></a></h2><ul><li><strong>成员变量（Member Variables）：</strong> 声明在类中，方法之外。成员变量描述的是类的属性，也称为字段（Field）。</li><li><strong>局部变量（Local Variables）：</strong> 声明在方法体或代码块中。</li></ul><h2 id="_10-2-初始默认值" tabindex="-1"><a class="header-anchor" href="#_10-2-初始默认值"><span>10.2 初始默认值</span></a></h2><ul><li><strong>成员变量：</strong> 有默认初始值，不需要显式地初始化。例如，<code>int</code> 类型默认为 <code>0</code>，<code>double</code> 类型默认为 <code>0.0</code>，<code>String</code> 类型默认为 <code>null</code>。</li><li><strong>局部变量：</strong> 没有默认初始值，使用前必须显式地赋值。</li></ul><h2 id="_10-3-内存位置" tabindex="-1"><a class="header-anchor" href="#_10-3-内存位置"><span>10.3 内存位置</span></a></h2><ul><li><strong>成员变量：</strong> 存储在堆内存中，与对象共存。</li><li><strong>局部变量：</strong> 存储在栈内存中。</li></ul><h2 id="_10-4-作用域" tabindex="-1"><a class="header-anchor" href="#_10-4-作用域"><span>10.4 作用域</span></a></h2><ul><li><strong>成员变量：</strong> 作用域是整个对象，可以在对象的任何方法中使用。</li><li><strong>局部变量：</strong> 作用域仅限于声明它的方法或代码块中。</li></ul><h2 id="_10-5-生命周期" tabindex="-1"><a class="header-anchor" href="#_10-5-生命周期"><span>10.5 生命周期</span></a></h2><ul><li><strong>成员变量：</strong> 与对象的生命周期相同，对象存在则成员变量存在，对象被销毁则成员变量也随之销毁。</li><li><strong>局部变量：</strong> 随着方法的调用而产生，随着方法的运行结束而结束。</li></ul><h2 id="_10-6-示例代码分析" tabindex="-1"><a class="header-anchor" href="#_10-6-示例代码分析"><span>10.6 示例代码分析</span></a></h2><p>以下面的 Java 代码为例，进一步说明成员变量和局部变量的区别：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Student</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 成员变量（对象的属性，Field）</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> score</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> printScore</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> score</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 98</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 局部变量</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">score</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出局部变量 score 的值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">score</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出成员变量 score 的值</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>name</code> 和 <code>score</code> 是 <code>Student</code> 类的成员变量。<code>name</code> 用于存储学生姓名，<code>score</code> 用于存储学生成绩。在 <code>printScore()</code> 方法中，<code>double score = 98;</code> 定义了一个局部变量 <code>score</code>。</p><ul><li>当在 <code>printScore()</code> 方法中直接使用 <code>score</code> 时，访问的是局部变量 <code>score</code>。</li><li>使用 <code>this.score</code> 可以明确地访问成员变量 <code>score</code>。<code>this</code> 关键字用于引用当前对象的成员。</li></ul>`,16)]))}const r=i(l,[["render",t]]),p=JSON.parse('{"path":"/notes/HMJava/vfx9g8re/","title":"成员变量和局部变量的区别","lang":"zh-CN","frontmatter":{"title":"成员变量和局部变量的区别","createTime":"2025/07/01 21:58:25","permalink":"/notes/HMJava/vfx9g8re/"},"readingTime":{"minutes":1.78,"words":534},"git":{"createdTime":1752578196000,"updatedTime":1752578196000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员Java/1.基础入门/7.面向对象基础/10.成员变量和局部变量的区别.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"7d7e6e","sort":10001,"name":"黑马程序员Java"},{"id":"31ae4c","sort":1,"name":"基础入门"},{"id":"f94128","sort":7,"name":"面向对象基础"}]}');export{r as comp,p as data};
