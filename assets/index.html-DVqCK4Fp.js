import{a,c as t,b as n,o as i}from"./app-CAzY0Upz.js";const p="/blog/assets/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%B0%83%E5%88%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-DmHHJNbx.png",l="/blog/assets/%E7%A0%81%E5%85%83%E7%9A%84%E6%A6%82%E5%BF%B5-DaqQ_FB8.png",e="/blog/assets/%E5%8F%8C%E6%9E%81%E6%80%A7%E4%B8%8D%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%81-GWYEojyf.png",o="/blog/assets/%E5%8F%8C%E6%9E%81%E6%80%A7%E4%B8%8D%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%81%E7%9A%84%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98-Bedkw_XV.png",r="/blog/assets/%E5%8F%8C%E6%9E%81%E6%80%A7%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%81-wTXi4dJt.png",c="/blog/assets/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81-DCh9tufX.png",g="/blog/assets/%E5%B7%AE%E5%88%86%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81-DbZVP2Yw.png",m="/blog/assets/2013%E5%B9%B4%E9%A2%9834-DeU20kH4.png",h="/blog/assets/2021%E5%B9%B4%E9%A2%9834-LSfSVLne.png",d="/blog/assets/%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%B8%A6%E9%80%9A%E8%B0%83%E5%88%B6%E6%96%B9%E6%B3%95-B45BF6mw.png",E="/blog/assets/QAM16%E6%98%9F%E5%BA%A7%E5%9B%BE-BOT6RV7a.png",B="/blog/assets/%E9%87%87%E7%94%A8%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81-C0p4_mDD.png",_={};function b(A,s){return i(),t("div",null,s[0]||(s[0]=[n('<p>计算机直接输出的数字信号往往并不适合在信道上传输，需要将其编码或调制成适合在信道上传输的信号。</p><h2 id="_2-4-1-编码与调制的基本概念" tabindex="-1"><a class="header-anchor" href="#_2-4-1-编码与调制的基本概念"><span><strong>2.4.1 编码与调制的基本概念</strong></span></a></h2><h3 id="_1-消息、数据和信号" tabindex="-1"><a class="header-anchor" href="#_1-消息、数据和信号"><span><strong>1. 消息、数据和信号</strong></span></a></h3><p><strong>消息、数据和信号</strong>：</p><ul><li>消息 (message)：需要由计算机处理和传输的文字、图片、音频和视频等内容。</li><li>数据 (data)：消息输入计算机后，就成为了有意义的符号序列。</li><li>信号 (signal)：网卡将比特 0 和比特 1 变换成相应的电磁表现。</li></ul><h3 id="_2-基带信号" tabindex="-1"><a class="header-anchor" href="#_2-基带信号"><span>2. 基带信号</span></a></h3><p>由信源发出的原始信号称为基带信号。</p><h3 id="_3-调制和编码" tabindex="-1"><a class="header-anchor" href="#_3-调制和编码"><span>3. 调制和编码</span></a></h3><ul><li>基带调制（编码）：对数字基带信号的波形进行变换，使其能够与信道特性相适应。</li><li>带通调制：将数字基带信号的频率范围搬移到较高的频段，并转换为模拟信号，使其能够在模拟信道中传输。</li></ul><img src="'+p+'" alt="编码与调制的基本概念" width="750" style="display:block;margin:auto;"><h3 id="_4-码元" tabindex="-1"><a class="header-anchor" href="#_4-码元"><span>4. 码元</span></a></h3><p><strong>码元</strong>：信号的编码单元。</p><ul><li>对于模拟信号，载波参数（振幅、频率、初相位）的变化就是一个码元。</li><li>对于数字信号，一个数字脉冲就是一个码元。</li></ul><p>一个码元所能携带的信息量谁（即构成离散数值的比特数量）不是固定的，而是取决于编码方式和调制方式。</p><img src="'+l+'" alt="码元的概念" width="750" style="display:block;margin:auto;"><h2 id="_2-4-2-常用编码方式" tabindex="-1"><a class="header-anchor" href="#_2-4-2-常用编码方式"><span><strong>2.4.2 常用编码方式</strong></span></a></h2><p>常用的编码方式有：不归零制、归零制、曼彻斯特编码以及差分曼彻斯特编码等。</p><h3 id="_1-双极性不归零编码" tabindex="-1"><a class="header-anchor" href="#_1-双极性不归零编码"><span>1. 双极性不归零编码</span></a></h3><p><strong>双极性不归零编码</strong>：用正电平和负电平分别表示比特 1 和 0。</p><img src="'+e+'" alt="双极性不归零编码" width="750" style="display:block;margin:auto;"><p>这种方式编码效率高，但存在同步问题：</p><img src="'+o+'" alt="双极性不归零编码的同步问题" width="750" style="display:block;margin:auto;"><p>为了解决同步问题，需要给收发双方再添加一条时钟信号线。发送方通过数据信号线给接收方发送数据的同时，还通过时钟信号线给接收方发送时钟信号。接收方按照接收到的时钟信号的节拍，对数据信号线上的信号进行采样。</p><p>对于计算机网络，宁愿利用这根传输线传输数据信号，而不是传输时钟信号。</p><h3 id="_2-双极性归零编码" tabindex="-1"><a class="header-anchor" href="#_2-双极性归零编码"><span>2. 双极性归零编码</span></a></h3><p><strong>双极性归零编码</strong>：在每个码元的中间时刻信号都会回归到零电平。</p><img src="'+r+'" alt="双极性归零编码" width="750" style="display:block;margin:auto;"><p>这种编码方式自同步，但编码效率低：归零编码中大部分的数据带宽，都用来传输“归零”而浪费掉了。</p><h3 id="_3-曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#_3-曼彻斯特编码"><span>3. 曼彻斯特编码</span></a></h3><p><strong>曼彻斯特编码</strong>：码元中间时刻的电平跳变既表示时钟信号，也表示数据。正跳变表示 1 还是 0，负跳变表示 0 还是 1，可以自行定义。</p><img src="'+c+'" alt="曼彻斯特编码" width="750" style="display:block;margin:auto;"><p>曼彻斯特编码属于自同步，10Mb/s 传统以太网采用的就是曼彻斯特编码。</p><h3 id="_4-差分曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#_4-差分曼彻斯特编码"><span>4. 差分曼彻斯特编码</span></a></h3><p><strong>差分曼彻斯特编码</strong>：码元中间时刻的电平跳变仅表示时钟信号，数据的表示在于每一个码元开始处是否有电平跳变：无跳变表示 1，有跳变表示 0。</p><img src="'+g+'" alt="差分曼彻斯特编码" width="750" style="display:block;margin:auto;"><p>在传输大量连续 1 或连续 0 的情况下，差分曼彻斯特编码信号比曼彻斯特编码信号的变化少。</p><p>在噪声干扰环境下，检测有无跳变比检测跳变方向更不容易出错，因此差分曼彻斯特编码信号比曼彻斯特编码信号更易于检测。</p><p>在传输介质接线错误导致高低电平翻转的情况下，差分曼彻斯特编码仍然有效。</p><div class="hint-container question"><p class="hint-container-title">2013 年 题 34</p><p>若下图为 10BaseT 网卡接收到的信号波形，则该网卡收到的比特串是 ( ) 。</p><img src="'+m+'" alt="2013年题34" width="750" style="display:block;margin:auto;"><p>A. 0011 0110</p><p>B. 1010 1101</p><p>C. 0101 0010</p><p>D. 1100 0101</p></div><div class="hint-container tip"><p class="hint-container-title">解析</p><ol><li><p>10BaseT 以太网使用的是曼彻斯特编码。</p></li><li><p>在曼彻斯特编码中，每个码元的中间时刻电平会发生跳变。通常规定，从高电平跳变到低电平（负跳变）表示 1，从低电平跳变到高电平（正跳变）表示 0（或者反之，具体定义取决于标准或约定，但同一系统内保持一致）。根据图中信号波形和选项 A，可以推断此处的定义为：</p><ul><li>低电平到高电平的跳变表示 0。</li><li>高电平到低电平的跳变表示 1。</li></ul><p>据此解码波形：</p><ul><li>第一个码元：低 -&gt; 高，表示 0</li><li>第二个码元：低 -&gt; 高，表示 0</li><li>第三个码元：高 -&gt; 低，表示 1</li><li>第四个码元：高 -&gt; 低，表示 1</li><li>第五个码元：低 -&gt; 高，表示 0</li><li>第六个码元：高 -&gt; 低，表示 1</li><li>第七个码元：高 -&gt; 低，表示 1</li><li>第八个码元：低 -&gt; 高，表示 0</li></ul><p>因此，接收到的比特串为 0011 0110。</p></li></ol></div><div class="hint-container question"><p class="hint-container-title">2021 年 题 34</p><p>若下图为一段差分曼彻斯特编码信号波形，则其编码的二进制位串是 ( )。</p><img src="'+h+'" alt="2021年题34" width="750" style="display:block;margin:auto;"><p>A. 1011 1001</p><p>B. 1101 0001</p><p>C. 0010 1110</p><p>D. 1011 0110</p></div><div class="hint-container tip"><p class="hint-container-title">解析</p><ol><li>码元中间时刻的电平跳变仅表示<strong>时钟信号</strong>，而不表示<strong>数据</strong>。</li><li>数据的表示取决于<strong>每一个码元开始处</strong>是否存在电平跳变：<strong>无跳变</strong>表示 1，<strong>有跳变</strong>表示 0。</li><li>答案选 A 。</li></ol></div><h2 id="_2-4-3-基本的带通调制方法和混合调制方法" tabindex="-1"><a class="header-anchor" href="#_2-4-3-基本的带通调制方法和混合调制方法"><span><strong>2.4.3 基本的带通调制方法和混合调制方法</strong></span></a></h2><h3 id="_1-基本的带通调制方法" tabindex="-1"><a class="header-anchor" href="#_1-基本的带通调制方法"><span>1. 基本的带通调制方法</span></a></h3><p>基本的带通调制方法有：</p><ul><li>调幅 (AM)：让载波的振幅随基带数字信号的变化而变化。</li><li>调频 (FM)：让载波的频率随基带数字信号的变化而变化。</li><li>调相 (PM)：让载波的初相位随基带数字信号的变化而变化。</li></ul><img src="'+d+'" alt="三种基本的带通调制方法" width="750" style="display:block;margin:auto;"><h3 id="_2-混合调制方法" tabindex="-1"><a class="header-anchor" href="#_2-混合调制方法"><span>2. 混合调制方法</span></a></h3><p><strong>混合调制方法</strong>：使用技术上更为复杂的混合调制方法，使 1 个码元可以表示多个比特的信息量。</p><p>例如<strong>正交振幅调制（QAM）</strong>：结合载波的相位和振幅进行调制。例如，QAM-16 可以调制出 16 种码元，每种码元可以对应表示 4 个比特（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mn>16</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">\\log_216=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>）。</p><img src="'+E+'" alt="QAM16星座图" width="750" style="display:block;margin:auto;"><p>每个码元与 4 个比特的对应关系采用格雷码，即任意两个相邻码元只有 1 个比特不同。</p><img src="'+B+'" alt="采用格雷码进行编码" width="750" style="display:block;margin:auto;">',53)]))}const y=a(_,[["render",b]]),f=JSON.parse('{"path":"/notes/HNUSTComputerNetwork/2-4-coding-and-modulation/","title":"4 编码与调制","lang":"zh-CN","frontmatter":{"title":"4 编码与调制","createTime":"2025/06/03 11:45:02","permalink":"/notes/HNUSTComputerNetwork/2-4-coding-and-modulation/"},"readingTime":{"minutes":6.7,"words":2009},"git":{"createdTime":1752578082000,"updatedTime":1752643223000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/湖科大计算机网络/第2章 物理层/2.4 编码与调制.md","headers":[]}');export{y as comp,f as data};
