import{a as d,c,e,d as n,b as l,f as t,r as a,o as i}from"./app-CAzY0Upz.js";const s={};function p(g,o){const r=a("Mermaid");return i(),c("div",null,[o[0]||(o[0]=e("h2",{id:"异常的分类",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#异常的分类"},[e("span",null,"异常的分类")])],-1)),o[1]||(o[1]=e("p",null,[t("在 Java 中，所有的异常都继承自 "),e("code",null,"java.lang.Throwable"),t(" 类。"),e("code",null,"Throwable"),t(" 主要分为两大类："),e("code",null,"Error"),t(" 和 "),e("code",null,"Exception"),t("。")],-1)),n(r,{code:"eJxLL0osyFAIceHiCskoyi9PTMpJVdDVtVNwLSrKL8IQrEhOLSjJzM/j4oIzwRJBpXklmbmpOOU9/ZGkknMSi4tdUtMUSvOSM1KTs1NTFNIyc3KslNMs03SKS4rys1OtlI2Nja2hSiFu0UG3A6HdmgsAjlhC/w=="}),o[2]||(o[2]=l('<p>根据 Java 编译器的强制处理要求，异常又可分为 <strong>Checked Exception</strong>（受检查异常）和 <strong>Unchecked Exception</strong>（非受检查异常）。</p><table><thead><tr><th>异常类型</th><th>分类</th><th>强制处理要求</th></tr></thead><tbody><tr><td><code>Error</code> 及其子类</td><td><strong>unchecked</strong></td><td>无需声明或捕获</td></tr><tr><td><code>RuntimeException</code> 及其子类</td><td><strong>unchecked</strong></td><td>无需声明或捕获</td></tr><tr><td><code>Exception</code>（除 <code>RuntimeException</code> 外）及其子类</td><td><strong>checked</strong></td><td>必须声明或捕获（否则编译失败）</td></tr></tbody></table><h2 id="error-和-exception-的区别" tabindex="-1"><a class="header-anchor" href="#error-和-exception-的区别"><span>Error 和 Exception 的区别</span></a></h2><p>在 Java 中，<code>Error</code> 和 <code>Exception</code> 都继承自 <code>Throwable</code> 类，用于表示程序运行过程中可能出现的问题。它们的主要区别如下：</p><ol><li><p><strong>本质和来源</strong></p><ul><li><strong><code>Error</code></strong>: 表示程序运行中遇到的系统级严重问题，通常是 JVM 无法处理的，是内部错误或资源耗尽等。这些问题超出了应用程序的控制和处理能力。</li><li><strong><code>Exception</code></strong>: 表示程序运行中遇到的程序级问题，通常是由于程序逻辑错误、不合法操作或外部因素（如 I/O 问题）导致的。这些问题是应用程序可以预见并尝试处理的。</li></ul></li><li><p><strong>可恢复性</strong></p><ul><li><strong><code>Error</code></strong>: 通常是不可恢复的。当 <code>Error</code> 发生时，应用程序往往无法继续正常运行，只能选择终止。例如，<code>OutOfMemoryError</code>（内存溢出）或 <code>StackOverflowError</code>（栈溢出）。</li><li><strong><code>Exception</code></strong>: 通常是可恢复的。应用程序可以通过 <code>try-catch</code> 语句捕获并处理 <code>Exception</code>，从而使程序能够从错误中恢复或优雅地关闭，而不会导致程序立即崩溃。</li></ul></li><li><p><strong>处理方式</strong></p><ul><li><strong><code>Error</code></strong>: 不建议在代码中捕获和处理 <code>Error</code>。捕获 <code>Error</code> 往往是徒劳的，因为它表明系统处于一个不稳定的状态，即使捕获也无法有效解决根本问题。</li><li><strong><code>Exception</code></strong>: 鼓励在代码中捕获和处理 <code>Exception</code>。通过 <code>try-catch-finally</code> 结构，程序可以对异常情况进行适当的响应，例如记录日志、回滚事务、向用户显示友好的错误信息或重试操作。</li></ul></li><li><p><strong>示例</strong></p><ul><li><strong><code>Error</code> 示例</strong>: <ul><li><code>java.lang.OutOfMemoryError</code>: JVM 内存不足。</li><li><code>java.lang.StackOverflowError</code>: 线程栈空间耗尽。</li><li><code>java.lang.NoClassDefFoundError</code>: 编译时存在但在运行时找不到类定义。</li></ul></li><li><strong><code>Exception</code> 示例</strong>: <ul><li><code>java.io.FileNotFoundException</code>: 尝试访问一个不存在的文件。</li><li><code>java.lang.NullPointerException</code>: 尝试在 <code>null</code> 对象上调用方法。</li><li><code>java.lang.IllegalArgumentException</code>: 方法接收到非法或不适当的参数。</li><li><code>java.sql.SQLException</code>: 数据库访问错误。</li></ul></li></ul></li></ol>',5))])}const E=d(s,[["render",p]]),m=JSON.parse('{"path":"/notes/interview/iclwhelr/","title":"异常体系","lang":"zh-CN","frontmatter":{"title":"异常体系","createTime":"2025/09/04 17:42:18","permalink":"/notes/interview/iclwhelr/"},"readingTime":{"minutes":2.16,"words":647},"git":{"createdTime":1757065260000,"updatedTime":1757065260000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/Java基础/异常体系.md","headers":[]}');export{E as comp,m as data};
