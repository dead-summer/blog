import{a as e,c as d,b as o,o as t}from"./app-CAzY0Upz.js";const c={};function r(l,a){return t(),d("div",null,a[0]||(a[0]=[o('<h2 id="jdk-5-新特性" tabindex="-1"><a class="header-anchor" href="#jdk-5-新特性"><span>JDK 5 新特性</span></a></h2><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h3><p>泛型是 Java 引入的类型参数化机制，允许在类、接口或方法中定义类型参数（如 <code>&lt;T&gt;</code>），提高代码的类型安全性和重用性。主要优点包括：</p><ul><li><strong>类型安全</strong>：泛型在编译阶段对类型进行严格检查。它确保只有符合泛型声明的特定类型的对象才能被添加到集合中，从而避免了在运行时出现不必要的类型转换错误，提高了程序的健壮性。</li><li><strong>代码复用</strong>：泛型允许为多种数据类型编写通用逻辑，减少代码冗余。例如，一个泛型方法 <code>public &lt;T&gt; void sort(List&lt;T&gt; list)</code> 可处理任意类型的列表，无需为每种类型重写相同逻辑，显著提升代码可维护性和复用性。</li></ul><h2 id="jdk-8-新特性" tabindex="-1"><a class="header-anchor" href="#jdk-8-新特性"><span>JDK 8 新特性</span></a></h2><h3 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式"><span>Lambda 表达式</span></a></h3><p>Lambda 表达式是 Java 8 引入的函数式编程核心特性，简化了匿名内部类的语法，使代码更简洁、可读性更强。其核心思想是将函数作为方法参数传递，支持函数式接口（如 <code>Runnable</code> 或 <code>Comparator</code>）。主要优势包括：</p><ul><li>减少样板代码，例如用 <code>(a, b) -&gt; a.compareTo(b)</code> 替代传统内部类。</li><li>提升函数式编程能力，支持行为参数化。</li></ul><h3 id="stream-流" tabindex="-1"><a class="header-anchor" href="#stream-流"><span>Stream 流</span></a></h3><p>Stream 流是一个高效、声明式的 API，用于处理集合数据（如 <code>List</code> 或 <code>Set</code>）。它支持链式操作（如 <code>filter</code>, <code>map</code>, <code>reduce</code>）和并行处理（通过 <code>parallelStream</code>），常用于数据过滤、转换和聚合场景。主要优势包括：</p><ul><li>提升代码可维护性，通过流水线式操作避免中间变量。</li><li>优化性能，尤其在并行模式下处理大数据集。</li></ul><h3 id="optional-类" tabindex="-1"><a class="header-anchor" href="#optional-类"><span>Optional 类</span></a></h3><p>Optional 类是一个容器对象，用于优雅地处理可能为 <code>null</code> 的对象。它强制开发者显式检查空值，减少 <code>NullPointerException</code> 风险。主要特性包括：</p><ul><li>提供 <code>of()</code>, <code>ofNullable()</code>, <code>orElse()</code> 等方法安全封装值。</li><li>支持函数式操作，如 <code>map()</code> 和 <code>filter()</code>，避免嵌套条件检查。</li></ul><h2 id="jdk-21-新特性" tabindex="-1"><a class="header-anchor" href="#jdk-21-新特性"><span>JDK 21 新特性</span></a></h2><h3 id="虚拟线程" tabindex="-1"><a class="header-anchor" href="#虚拟线程"><span>虚拟线程</span></a></h3><p>虚拟线程（也称为轻量级线程或用户态线程）是 Java 21 引入的高并发特性，类似于 Go 语言中的协程（Goroutine）。它们由 JVM 管理，而非操作系统线程。主要优势包括：</p><ul><li>轻量级资源占用，支持创建数千个线程，减少内存和上下文切换开销。</li><li>提升并发性能，通过结构化并发模型简化异步编程，避免线程阻塞问题。</li></ul>',18)]))}const n=e(c,[["render",r]]),s=JSON.parse('{"path":"/notes/interview/e78b6eh4/","title":"JDK新特性","lang":"zh-CN","frontmatter":{"title":"JDK新特性","createTime":"2025/09/04 16:07:53","permalink":"/notes/interview/e78b6eh4/"},"readingTime":{"minutes":2.2,"words":659},"git":{"createdTime":1757065260000,"updatedTime":1757065260000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/Java基础/JDK新特性.md","headers":[]}');export{n as comp,s as data};
