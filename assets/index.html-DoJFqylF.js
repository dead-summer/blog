import{a,c as e,b as i,o as n}from"./app-CAzY0Upz.js";const d={};function l(t,s){return n(),e("div",null,s[0]||(s[0]=[i(`<p>本节课主要讲解关于面向对象编程中一些需要注意的细节问题。下面将逐条解释这些注意事项，并对其中一些比较难以理解的点进行详细说明。</p><h2 id="_4-1-类的-public-修饰符" tabindex="-1"><a class="header-anchor" href="#_4-1-类的-public-修饰符"><span>4.1 类的 public 修饰符</span></a></h2><p>在一个 <code>.java</code> 文件中，可以定义多个类，但只能有一个类被 <code>public</code> 关键字修饰。这个 <code>public</code> 类的名称必须与文件名完全相同（包括大小写）。</p><p>例如，如果文件名是 <code>Demo1.java</code>，那么有且只有一个类需要声明为 <code>public class Demo1</code>。其他类可以不使用 <code>public</code> 修饰符，例如 <code>class Student</code>。</p><p>以下是一个示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// public 修饰的类 Demo1，和文件名 Demo1 相同</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Demo1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Student</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>Demo1</code> 类被声明为 <code>public</code>，并且文件名与之对应。<code>Student</code> 类没有 <code>public</code> 修饰符，这意味着它只能在同一个包内被访问。</p><h2 id="_4-2-对象与对象之间的影响" tabindex="-1"><a class="header-anchor" href="#_4-2-对象与对象之间的影响"><span>4.2 对象与对象之间的影响</span></a></h2><p>每个对象都是独立的，拥有自己的数据副本。因此，当创建多个对象时，它们之间的数据不会相互影响。但是，如果多个变量引用同一个对象，那么通过一个变量修改对象的数据，会影响到所有引用该对象的其他变量。</p>`,9)]))}const p=a(d,[["render",l]]),r=JSON.parse('{"path":"/notes/HMJava/1ctali69/","title":"类和对象的一些注意事项","lang":"zh-CN","frontmatter":{"title":"类和对象的一些注意事项","createTime":"2025/07/01 21:08:09","permalink":"/notes/HMJava/1ctali69/"},"readingTime":{"minutes":1.17,"words":351},"git":{"createdTime":1752578196000,"updatedTime":1752578196000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员Java/1.基础入门/7.面向对象基础/4.类和对象的一些注意事项.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"7d7e6e","sort":10001,"name":"黑马程序员Java"},{"id":"31ae4c","sort":1,"name":"基础入门"},{"id":"f94128","sort":7,"name":"面向对象基础"}]}');export{p as comp,r as data};
