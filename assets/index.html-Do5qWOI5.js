import{a as o,c as k,b as r,d as l,w as a,r as d,o as c,e as i,f as h}from"./app-CAzY0Upz.js";const g={};function m(v,s){const n=d("VPIcon"),p=d("CodeTabs");return c(),k("div",null,[s[4]||(s[4]=r(`<p>将所有配置信息放在单个配置文件中，尤其当不同配置应用于不同的场景时，会导致配置文件的臃肿和不合理。因此，将一个配置文件拆分成多个配置文件是一种更优的实践。拆分后，每个配置文件专注于配置其特定的项，而在主配置文件中指明要使用哪个配置文件。</p><h2 id="_1-主配置文件" tabindex="-1"><a class="header-anchor" href="#_1-主配置文件"><span>1. 主配置文件</span></a></h2><p>主配置文件用于指定当前激活的环境，从而决定加载哪个环境配置文件。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">spring</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	profiles</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">		active</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pro</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 启动 pro 环境</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>spring.profiles.active</code> 属性用于指定激活的 profile，这里设置为 <code>pro</code>，表示激活生产环境配置。</p><h2 id="_2-环境配置文件" tabindex="-1"><a class="header-anchor" href="#_2-环境配置文件"><span>2. 环境配置文件</span></a></h2><p>每个环境配置文件仅包含特定于该环境的配置项，无需在文件中声明环境名称。</p>`,7)),l(p,{id:"19",data:[{id:"application-pro.yaml"},{id:"application-dev.yaml"}]},{title0:a(({value:e,isActive:t})=>[l(n,{provider:"iconify",name:"vscode-icons:file-type-light-yaml"}),s[0]||(s[0]=i("span",null,"application-pro.yaml",-1))]),title1:a(({value:e,isActive:t})=>[l(n,{provider:"iconify",name:"vscode-icons:file-type-light-yaml"}),s[1]||(s[1]=i("span",null,"application-dev.yaml",-1))]),tab0:a(({value:e,isActive:t})=>s[2]||(s[2]=[i("div",{class:"language-yaml line-numbers-mode","data-highlighter":"shiki","data-ext":"yaml",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-yaml"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"server"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),h(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"	port"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 80"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," # 生产环境端口")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:a(({value:e,isActive:t})=>s[3]||(s[3]=[i("div",{class:"language-yaml line-numbers-mode","data-highlighter":"shiki","data-ext":"yaml",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",{class:"language-yaml"},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"server"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":")]),h(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"	port"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},":"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 81"),i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}}," # 开发环境端口")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[5]||(s[5]=r('<p><strong>命名规则：</strong> 环境配置文件的命名规则为 <code>application-{环境名}.yaml</code>。例如，<code>application-pro.yaml</code> 对应生产环境，<code>application-dev.yaml</code> 对应开发环境。</p><h2 id="_3-配置优先级与覆盖" tabindex="-1"><a class="header-anchor" href="#_3-配置优先级与覆盖"><span>3. 配置优先级与覆盖</span></a></h2><p>如果某些配置项在所有环境中都相同，可以将这些配置项写入主配置文件中，作为公共配置。只有那些在不同环境中需要有区别的配置项才应该写入到环境配置文件中。</p><ul><li><strong>主配置文件：</strong> 设置公共配置（全局）。</li><li><strong>环境分类配置文件：</strong> 常用于设置冲突属性（局部），会覆盖主配置文件中的同名属性。</li></ul><p>通过以上方式，可以实现灵活、可维护的多环境配置管理。</p>',5))])}const u=o(g,[["render",m]]),f=JSON.parse('{"path":"/notes/HMSpringBoot/1xvguu3u/","title":"3-2.多环境开发（yaml多文件版）","lang":"zh-CN","frontmatter":{"title":"3-2.多环境开发（yaml多文件版）","createTime":"2025/06/23 14:06:19","permalink":"/notes/HMSpringBoot/1xvguu3u/"},"readingTime":{"minutes":1.53,"words":458},"git":{"createdTime":1752578290000,"updatedTime":1752578290000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员SpringBoot/2.运维实用篇/3.多环境开发/3-2.多环境开发（yaml多文件版）.md","headers":[]}');export{u as comp,f as data};
