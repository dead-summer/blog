import{a as i,c as a,b as e,o as l}from"./app-CAzY0Upz.js";const n={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[e(`<p>本节主要讲解如何在 Spring Boot 项目中使用日志工具来记录日志，方便开发调试和运维监控。</p><h2 id="_1-添加日志记录操作" tabindex="-1"><a class="header-anchor" href="#_1-添加日志记录操作"><span>1. 添加日志记录操作</span></a></h2><p>首先，在需要记录日志的类中，需要获取一个 <code>Logger</code> 对象，然后使用该对象调用不同的方法来记录不同级别的日志信息。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RestController</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RequestMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/books</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BookController</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BaseClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Logger</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> LoggerFactory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getLogger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">BookController</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">GetMapping</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">debug</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">debug...</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">info...</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">warn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">warn...</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">error...</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">springboot is running...2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码解释：</strong></p><ul><li><code>private static final Logger log = LoggerFactory.getLogger(BookController.class);</code>：这行代码是获取 <code>Logger</code> 对象的关键。<code>LoggerFactory</code> 是一个日志工厂类，<code>getLogger(BookController.class)</code> 方法会根据传入的类名创建一个 <code>Logger</code> 实例，<code>BookController.class</code> 的目的是为了在日志中能够区分出是哪个类产生的日志信息。<code>private static final</code> 表明 <code>log</code> 对象是 <code>BookController</code> 类私有的、静态的、不可变的，这意味着每个 <code>BookController</code> 类的实例共享同一个 <code>Logger</code> 对象，且该对象一旦创建后就不能被修改。</li><li><code>log.debug(&quot;debug...&quot;);</code>、<code>log.info(&quot;info...&quot;);</code>、<code>log.warn(&quot;warn...&quot;);</code>、<code>log.error(&quot;error...&quot;);</code>：这些代码是实际记录日志的操作。<code>log</code> 对象提供了不同级别的日志记录方法，如 <code>debug()</code>、<code>info()</code>、<code>warn()</code> 和 <code>error()</code>。开发者可以根据实际情况选择合适的日志级别来记录信息。例如，<code>debug()</code> 用于记录调试信息，<code>info()</code> 用于记录一般信息，<code>warn()</code> 用于记录警告信息，<code>error()</code> 用于记录错误信息。</li></ul><p>上述代码展示了如何在 <code>BookController</code> 类中使用 <code>Logger</code> 对象记录不同级别的日志信息。在实际开发中，可以根据需要在不同的类和方法中添加日志记录操作，以便更好地了解系统的运行状态和排查问题。</p><h2 id="_2-设置日志输出级别" tabindex="-1"><a class="header-anchor" href="#_2-设置日志输出级别"><span>2. 设置日志输出级别</span></a></h2><p>日志级别用于控制哪些级别的日志信息会被记录下来。通过设置合适的日志级别，可以避免输出过多的无用信息，提高日志的可读性。常见的日志级别从低到高依次为：</p><ul><li>TRACE：运行堆栈信息，使用率低</li><li>DEBUG：程序员调试代码使用</li><li>INFO：记录运维过程数据</li><li>WARN：记录运维过程报警数据</li><li>ERROR：记录错误堆栈信息</li><li>FATAL：灾难信息，合并计入 ERROR</li></ul><p>通常情况下，开发时使用 DEBUG 级别，上线后使用 INFO 级别，运维信息记录使用 WARN 级别。</p><p><strong>在 <code>application.yml</code> 中设置日志级别：</strong></p><ol><li><p>简单粗暴的方式：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">debug</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>细粒度的控制方式：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">logging</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	level</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    	root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><code>logging.level.root: debug</code> 表示设置根 logger 的级别为 <code>debug</code>。根 logger 是所有 logger 的父 logger，因此这个设置会影响到整个应用程序的日志级别。这意味着，只有级别为 <code>debug</code>、<code>info</code>、<code>warn</code>、<code>error</code> 和 <code>fatal</code> 的日志信息才会被输出。</p><h2 id="_3-设置日志组" tabindex="-1"><a class="header-anchor" href="#_3-设置日志组"><span>3. 设置日志组</span></a></h2><p>日志组允许将多个包组合在一起，统一设置日志级别。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">logging</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	# 设置日志组</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    group</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    	# 自定义组名，设置当前组中所包含的包</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        ebank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> com.itheima.controller</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    level</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    	root</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> warn</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # 为对应组设置日志级别</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        ebank</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> debug</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    	# 为对包设置日志级别</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        com.itheima.controller</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> debug</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段配置展示了如何在 <code>application.yml</code> 文件中配置日志组和日志级别。</p><ul><li><code>logging.group.ebank: com.itheima.controller</code>：这行代码定义了一个名为 <code>ebank</code> 的日志组，并将 <code>com.itheima.controller</code> 包添加到了该组中。这意味着，所有位于 <code>com.itheima.controller</code> 包中的类的日志记录器都将属于 <code>ebank</code> 组。</li><li><code>logging.level.root: warn</code>：这行代码设置了根日志记录器的级别为 <code>warn</code>。这意味着，如果没有为特定的日志记录器或日志组指定级别，那么它们将默认使用 <code>warn</code> 级别。</li><li><code>logging.level.ebank: debug</code>：这行代码设置了 <code>ebank</code> 日志组的级别为 <code>debug</code>。由于 <code>com.itheima.controller</code> 包属于 <code>ebank</code> 组，因此该包中的所有类的日志记录器都将使用 <code>debug</code> 级别，覆盖了根日志记录器的 <code>warn</code> 级别。</li><li><code>logging.level.com.itheima.controller: debug</code>：这行代码直接设置了 <code>com.itheima.controller</code> 包的级别为 <code>debug</code>。与上一行代码的效果相同，都是将该包中的所有类的日志记录器级别设置为 <code>debug</code>。</li></ul><p>总的来说，这段配置的目的是将 <code>com.itheima.controller</code> 包中的所有类的日志记录器级别设置为 <code>debug</code>，同时保持其他包的日志记录器级别为默认的 <code>warn</code>。</p><h2 id="_4-优化日志对象创建代码" tabindex="-1"><a class="header-anchor" href="#_4-优化日志对象创建代码"><span>4. 优化日志对象创建代码</span></a></h2><p>在上述介绍的传统 Java 代码中，每个类都需要手动创建一个 <code>Logger</code> 对象，例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RestController</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RequestMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/books</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BookController</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BaseClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Logger</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> LoggerFactory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getLogger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">BookController</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码需要在每个类中都重复编写，显得比较繁琐。</p><p>为了解决这个问题，可以使用 Lombok 提供的 <code>@Slf4j</code> 注解来自动生成 <code>Logger</code> 对象。使用 <code>@Slf4j</code> 注解后，上面的代码可以简化为：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RestController</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RequestMapping</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/books</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BookController</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> BaseClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 无需手动创建 Logger 对象</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码解释：</strong></p><ul><li><code>@Slf4j</code>：这是一个 Lombok 提供的注解，用于自动生成 <code>Logger</code> 对象。当类上添加了 <code>@Slf4j</code> 注解后，Lombok 会在编译时自动生成一个名为 <code>log</code> 的 <code>Logger</code> 对象，开发者可以直接在类中使用该对象来记录日志信息，无需手动创建。日志对象名为 <code>log</code>。</li></ul>`,28)]))}const d=i(n,[["render",h]]),p=JSON.parse('{"path":"/notes/HMSpringBoot/iw08cfb6/","title":"4-1.代码中使用日志工具记录日志","lang":"zh-CN","frontmatter":{"title":"4-1.代码中使用日志工具记录日志","createTime":"2025/06/23 15:18:35","permalink":"/notes/HMSpringBoot/iw08cfb6/"},"readingTime":{"minutes":4.56,"words":1368},"git":{"createdTime":1752578290000,"updatedTime":1752578290000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员SpringBoot/2.运维实用篇/4.日志/4-1.代码中使用日志工具记录日志.md","headers":[]}');export{d as comp,p as data};
