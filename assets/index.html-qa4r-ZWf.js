import{_ as e}from"./1.存储引擎-20250729152625542-DePBCEM8.js";import{a as l,c as s,b as i,o as n}from"./app-CAzY0Upz.js";const d="/blog/assets/1.%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-20250804144636861-Cbw_CYdm.png",a={};function r(o,t){return n(),s("div",null,t[0]||(t[0]=[i('<h2 id="_1-1-mysql-体系结构" tabindex="-1"><a class="header-anchor" href="#_1-1-mysql-体系结构"><span>1.1 MySQL 体系结构</span></a></h2><p>MySQL 采用分层架构，分为四层： <img src="'+d+`" alt="1.存储引擎-20250804144636861" width="750" style="display:block;margin:auto;"></p><ol><li><p><strong>连接层</strong></p><ul><li>提供客户端连接服务（如 TCP/IP、本地 Socket 通信）。</li><li>完成连接处理、授权认证及安全方案（如 SSL 加密）。</li><li>引入线程池，为认证通过的客户端分配线程。</li></ul></li><li><p><strong>服务层</strong></p><ul><li>核心功能：SQL 接口、缓存查询、SQL 解析与优化（如索引选择、执行计划生成）。</li><li>实现跨存储引擎功能（存储过程、函数等）。</li><li><code>SELECT</code> 语句优先查询缓存，提升读密集场景性能。</li></ul></li><li><p><strong>引擎层</strong></p><ul><li>负责数据存储和提取，通过 API 与服务器交互。</li><li><strong>索引在引擎层实现</strong>，支持插件式引擎（如 InnoDB、MyISAM）。</li></ul></li><li><p><strong>存储层</strong></p><ul><li>存储数据文件（表数据、索引）、日志（redo/undo log、二进制日志、慢查询日志等）。</li><li>与存储引擎交互完成数据读写。</li></ul></li></ol><p>与其他数据库相比，MySQL 的独特之处在于其架构可以在多种场景中应用并发挥良好作用，这主要体现在存储引擎上。插件式的存储引擎架构将查询处理和其他系统任务与数据的存储提取分离，使得可以根据业务需求选择合适的存储引擎。</p><h2 id="_1-2-存储引擎核心概念" tabindex="-1"><a class="header-anchor" href="#_1-2-存储引擎核心概念"><span>1.2 存储引擎核心概念</span></a></h2><p>存储引擎是存储数据、建立索引、更新 / 查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，因此存储引擎也被称为表类型。可以在创建表时指定存储引擎，如果没有指定，则使用默认存储引擎。</p><ol><li>建表指定引擎：</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CREATE</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> TABLE</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 表名</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    字段1 类型 [COMMENT &#39;注释&#39;],</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) ENGINE </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> InnoDB [COMMENT &#39;表注释&#39;];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>查询支持的引擎<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SHOW ENGINES;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="_1-3-三大存储引擎特性" tabindex="-1"><a class="header-anchor" href="#_1-3-三大存储引擎特性"><span>1.3 三大存储引擎特性</span></a></h2><h3 id="_1-3-1-innodb" tabindex="-1"><a class="header-anchor" href="#_1-3-1-innodb"><span>1.3.1 InnoDB</span></a></h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎。自 MySQL 5.5 起，它成为 MySQL 的默认存储引擎。</p><ol><li><p><strong>特点</strong></p><ul><li>支持 DML 操作遵循 ACID 模型，确保事务完整性。</li><li>使用行级锁定机制，提升并发访问性能。</li><li>支持 FOREIGN KEY 外键约束，保障数据完整性和正确性。</li></ul></li><li><p><strong>文件结构</strong></p><ul><li><p>每个 InnoDB 表对应一个 <code>.ibd</code> 表空间文件（文件名基于表名，如 <code>account.ibd</code>）。该文件存储表的表结构（早期版本使用 <code>.frm</code> 文件，新版本使用 <code>.sdi</code> 文件）、数据及索引信息。</p></li><li><p>可使用 <code>innodb_file_per_table</code> 参数检查 .ibd 文件独立性：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">show variables </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">like</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">innodb_file_per_table</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>代码解释</strong>：此命令查询 InnoDB 是否启用每表独立文件模式。输出结果通常为 <code>ON</code>（开启），表示每张表生成单独的 .ibd 文件。这利于数据库管理，如备份和空间优化。</li></ul></li><li><p>可使用 MySQL 指令 <code>ibd2sdi</code> 提取表结构信息（例如，执行 <code>ibd2sdi account.ibd</code> 从 <code>account.ibd</code> 中读取 sdi 字典数据）。</p></li></ul></li><li><p><strong>逻辑存储结构</strong></p><p><code>InnoDB</code> 的逻辑存储结构由高到低依次为：表空间 (Tablespace)、段 (Segment)、区 (Extent)、页 (Page) 和行 (Row)。</p><img src="`+e+'" alt="1.存储引擎-20250729152625542" width="750" style="display:block;margin:auto;"><ul><li><strong>表空间 (Tablespace)</strong>：InnoDB 存储引擎逻辑结构的最高层，<code>.ibd</code> 文件就是表空间文件，其中可以包含多个段 (Segment)。</li><li><strong>段 (Segment)</strong>：表空间由各个段组成，常见的段有数据段、索引段、回滚段等。InnoDB 中对于段的管理由引擎自身完成，不需要人为控制，一个段中包含多个区 (Extent)。</li><li><strong>区 (Extent)</strong>：区是表空间的单元结构，每个区的大小为 1M。默认情况下，InnoDB 存储引擎页大小为 16K，即一个区中一共有 64 个连续的页 (Page)。</li><li><strong>页 (Page)</strong>：页是组成区的最小单元，也是 InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。</li><li><strong>行 (Row)</strong>：InnoDB 存储引擎是面向行的，数据按行存放。每一行中除了定义表时指定的字段以外，还包含两个隐藏字段。</li></ul></li></ol><h4 id="_1-3-2-myisam" tabindex="-1"><a class="header-anchor" href="#_1-3-2-myisam"><span>1.3.2 MyISAM</span></a></h4><p>MyISAM 定位为高性能但功能简化的存储引擎，曾是 MySQL 默认引擎。</p><ol><li><p><strong>特点</strong></p><ul><li><strong>不支持事务或外键约束</strong>，设计更轻量。</li><li><strong>仅支持表级锁</strong>，限制了并发能力，但提升了读访问速度。</li><li><strong>访问速度快</strong>，尤其针对读密集型操作。</li></ul></li><li><p><strong>文件结构</strong></p><ul><li>每个 MyISAM 表对应三个独立文件： <ul><li><code>xxx.sdi</code>：存储表结构信息（基于 JSON 格式）。</li><li><code>xxx.MYD</code>：存储实际数据（MYData）。</li><li><code>xxx.MYI</code>：存储索引（MYIndex）。</li></ul></li></ul></li></ol><h4 id="_1-3-3-memory" tabindex="-1"><a class="header-anchor" href="#_1-3-3-memory"><span>1.3.3 Memory</span></a></h4><p>Memory 将数据完全存储在内存中，适合临时表或缓存场景；断电或故障会导致数据丢失。</p><ol><li><p><strong>特点</strong></p><ul><li><strong>数据驻留内存</strong>（非持久化存储），访问极快。</li><li><strong>默认使用 Hash 索引</strong>，优化等值查询效率。</li></ul></li><li><p><strong>文件结构</strong></p><ul><li>仅需一个文件：<code>xxx.sdi</code>，存储表结构信息。数据本身不落盘，依赖内存管理。</li></ul></li></ol><h3 id="_1-3-4-存储引擎的区别及特点" tabindex="-1"><a class="header-anchor" href="#_1-3-4-存储引擎的区别及特点"><span>1.3.4 存储引擎的区别及特点</span></a></h3><p><code>InnoDB</code>、<code>MyISAM</code> 和 <code>Memory</code> 存储引擎的区别及特点总结如下表：</p><table><thead><tr><th style="text-align:left;">特点</th><th style="text-align:left;">InnoDB</th><th style="text-align:left;">MyISAM</th><th style="text-align:left;">Memory</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>数据存储方式</strong></td><td style="text-align:left;">基于聚簇索引，数据和索引存储在一起</td><td style="text-align:left;">数据和索引分开存储</td><td style="text-align:left;">数据存储在内存中，重启丢失</td></tr><tr><td style="text-align:left;"><strong>存储限制</strong></td><td style="text-align:left;">64TB</td><td style="text-align:left;">默认 4GB (可配置，最大 256TB)</td><td style="text-align:left;">受限于可用内存大小</td></tr><tr><td style="text-align:left;"><strong>事务安全</strong></td><td style="text-align:left;">支持 ACID 事务，提供事务隔离和数据一致性</td><td style="text-align:left;">不支持事务</td><td style="text-align:left;">不支持事务</td></tr><tr><td style="text-align:left;"><strong>锁机制</strong></td><td style="text-align:left;">行锁 (基于索引，减少锁冲突)</td><td style="text-align:left;">表锁 (锁粒度大，并发性能较低)</td><td style="text-align:left;">表锁</td></tr><tr><td style="text-align:left;"><strong>B+tree 索引</strong></td><td style="text-align:left;">支持 (聚簇索引和二级索引)</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;"><strong>Hash 索引</strong></td><td style="text-align:left;">自适应哈希索引 (InnoDB 内部优化，不可控)</td><td style="text-align:left;">不支持</td><td style="text-align:left;">支持</td></tr><tr><td style="text-align:left;"><strong>全文索引</strong></td><td style="text-align:left;">支持 (5.6 版本后)</td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持</td></tr><tr><td style="text-align:left;"><strong>空间使用</strong></td><td style="text-align:left;">高</td><td style="text-align:left;">低</td><td style="text-align:left;">N/A</td></tr><tr><td style="text-align:left;"><strong>内存使用</strong></td><td style="text-align:left;">高</td><td style="text-align:left;">低</td><td style="text-align:left;">中等</td></tr><tr><td style="text-align:left;"><strong>批量插入速度</strong></td><td style="text-align:left;">低</td><td style="text-align:left;">高</td><td style="text-align:left;">高</td></tr><tr><td style="text-align:left;"><strong>支持外键</strong></td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持</td><td style="text-align:left;">不支持</td></tr></tbody></table><h2 id="_1-4-存储引擎对比与选型" tabindex="-1"><a class="header-anchor" href="#_1-4-存储引擎对比与选型"><span>1.4 存储引擎对比与选型</span></a></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>InnoDB</strong></th><th><strong>MyISAM</strong></th><th><strong>Memory</strong></th></tr></thead><tbody><tr><td><strong>事务支持</strong></td><td>✔️</td><td>✘</td><td>✘</td></tr><tr><td><strong>外键</strong></td><td>✔️</td><td>✘</td><td>✘</td></tr><tr><td><strong>锁粒度</strong></td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td><strong>索引类型</strong></td><td>B+Tree</td><td>B+Tree</td><td>Hash（默认）</td></tr><tr><td><strong>存储限制</strong></td><td>64TB</td><td>有</td><td>内存大小</td></tr><tr><td><strong>可靠性</strong></td><td>高（崩溃恢复）</td><td>低</td><td>低（断电丢失）</td></tr></tbody></table><p><strong>选型建议</strong>：</p><ul><li><strong>InnoDB</strong>：需事务、高并发写操作（如订单系统）。</li><li><strong>MyISAM</strong>：读密集、少更新场景（如数据仓库）。</li><li><strong>Memory</strong>：高速临时数据处理（如会话缓存）。</li></ul>',26)]))}const p=l(a,[["render",r]]),c=JSON.parse('{"path":"/notes/HMMySQL/s5syrw70/","title":"存储引擎","lang":"zh-CN","frontmatter":{"title":"存储引擎","createTime":"2025/07/29 14:59:21","permalink":"/notes/HMMySQL/s5syrw70/"},"readingTime":{"minutes":5.59,"words":1678},"git":{"createdTime":1753785288000,"updatedTime":1754306652000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员MySQL/2.进阶篇/1.存储引擎.md","headers":[]}');export{p as comp,c as data};
