import{a as e,c as t,b as d,o as n}from"./app-CAzY0Upz.js";const o={};function r(s,a){return n(),t("div",null,a[0]||(a[0]=[d('<p>本章主要介绍 Java 中的构造器，掌握构造器的概念、特点、应用场景和注意事项。</p><h2 id="_6-1-什么是构造器" tabindex="-1"><a class="header-anchor" href="#_6-1-什么是构造器"><span>6.1 什么是构造器？</span></a></h2><p>构造器是一种特殊的方法，用于创建对象。它具有以下特点：</p><ul><li>没有返回值类型。</li><li>方法名必须与类名完全相同。</li></ul><p>例如，对于 <code>Student</code> 类，其构造器也必须命名为 <code>Student</code>。构造器可以分为无参数构造器和有参数构造器。</p><h2 id="_6-2-构造器的特点" tabindex="-1"><a class="header-anchor" href="#_6-2-构造器的特点"><span>6.2 构造器的特点？</span></a></h2><p>构造器的主要特点是在创建对象时被调用。</p><p><code>new Student()</code> 实际上是在执行 <code>Student</code> 类的构造器。当构造器执行完毕，就意味着对象创建成功。如果是 <code>new Student(&quot;播仔&quot;, 99)</code>，则执行的是带有参数的构造器，执行完毕后对象同样创建完成。</p><h2 id="_6-3-构造器的应用场景" tabindex="-1"><a class="header-anchor" href="#_6-3-构造器的应用场景"><span>6.3 构造器的应用场景？</span></a></h2><p>构造器的主要应用场景是在创建对象时，可以对对象的属性进行初始化操作。</p><h2 id="_6-4-构造器的注意事项" tabindex="-1"><a class="header-anchor" href="#_6-4-构造器的注意事项"><span>6.4 构造器的注意事项？</span></a></h2><p>在设计类时，需要注意以下关于构造器的事项：</p><ol><li>如果一个类没有显式定义构造器，Java 会自动生成一个无参数构造器。</li><li>如果已经定义了有参数构造器，Java 将不再自动提供无参数构造器。此时，建议手动添加一个无参数构造器，以避免在某些情况下出现问题。</li></ol>',13)]))}const c=e(o,[["render",r]]),p=JSON.parse('{"path":"/notes/HMJava/mw3fig41/","title":"构造器","lang":"zh-CN","frontmatter":{"title":"构造器","createTime":"2025/07/01 21:28:12","permalink":"/notes/HMJava/mw3fig41/"},"readingTime":{"minutes":1.25,"words":376},"git":{"createdTime":1752578196000,"updatedTime":1752578196000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员Java/1.基础入门/7.面向对象基础/6.构造器.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"7d7e6e","sort":10001,"name":"黑马程序员Java"},{"id":"31ae4c","sort":1,"name":"基础入门"},{"id":"f94128","sort":7,"name":"面向对象基础"}]}');export{c as comp,p as data};
