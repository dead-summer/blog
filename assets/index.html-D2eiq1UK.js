import{a as s,c as e,b as l,o as a}from"./app-CAzY0Upz.js";const n={};function t(o,i){return a(),e("div",null,i[0]||(i[0]=[l(`<h2 id="慢-sql-的定位" tabindex="-1"><a class="header-anchor" href="#慢-sql-的定位"><span>慢 SQL 的定位</span></a></h2><p>MySQL 提供了慢查询日志（Slow Query Log）功能，可以记录所有执行时间超过 <code>long_query_time</code> 设置值的 SQL 语句。通过分析慢查询日志，可以快速定位到需要优化的 SQL。</p><h2 id="慢-sql-的分析" tabindex="-1"><a class="header-anchor" href="#慢-sql-的分析"><span>慢 SQL 的分析</span></a></h2><p>慢 SQL 通常由以下原因导致：</p><ol><li><strong>数据量过大</strong>：单表数据量超过千万级，导致查询效率下降。</li><li><strong>高并发请求</strong>：瞬时大量请求导致数据库资源争用。</li><li><strong>索引问题</strong>： <ul><li>未建立索引</li><li>索引失效（如函数操作、隐式类型转换）</li><li>索引选择不当</li></ul></li><li><strong>SQL 语句缺陷</strong>： <ul><li>低效的 <code>JOIN</code> 或子查询</li><li>未充分利用索引覆盖</li><li>冗余计算或数据传输</li></ul></li><li><strong>表结构设计缺陷</strong>： <ul><li>字段类型不合理（如字符串存储日期）</li><li>过度范式化导致多表关联</li><li>存在 <code>NULL</code> 字段或 <code>TEXT/BLOB</code> 大字段</li></ul></li><li><strong>业务逻辑不合理</strong>： <ul><li>深度分页查询（如 <code>LIMIT 1000000, 10</code>）</li><li>实时计算可延迟的报表</li></ul></li><li><strong>服务器配置不足</strong>： <ul><li>CPU、内存、磁盘 I/O 瓶颈</li></ul></li></ol><h2 id="慢-sql-的优化方案" tabindex="-1"><a class="header-anchor" href="#慢-sql-的优化方案"><span>慢 SQL 的优化方案</span></a></h2><h3 id="索引优化" tabindex="-1"><a class="header-anchor" href="#索引优化"><span>索引优化</span></a></h3><ul><li><strong>控制索引数量</strong>：单表索引不超过 5 个。过多索引增加写操作成本，且优化器选择执行计划时消耗更多资源。</li><li><strong>联合索引设计</strong>： <ul><li>区分度最高的列放在最左侧（如 <code>user_id</code> 比 <code>gender</code> 区分度高）。</li><li>高频查询条件优先左置。</li><li>覆盖排序需求：若查询含 <code>WHERE</code> 和 <code>ORDER BY</code>，可合并为联合索引。</li></ul></li><li><strong>避免索引失效场景</strong>： <ul><li>禁止对索引列使用函数（如 <code>YEAR(create_time)</code>）。</li><li>避免隐式类型转换（如字符串列用数字查询）。</li></ul></li></ul><div class="hint-container example"><p class="hint-container-title">对 WHERE 和 ORDER BY 字段建立联合索引</p><p>对于查询：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age, city, </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">name</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> user </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> city </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Beijing</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> ORDER BY</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>建立 <code>(age, city, name)</code> 的联合索引，可以避免回表操作，并且 <code>ORDER BY</code> 操作可以直接利用索引的有序性，无需额外排序。</p></div><h3 id="sql-语句优化" tabindex="-1"><a class="header-anchor" href="#sql-语句优化"><span>SQL 语句优化</span></a></h3><ul><li><strong>禁止 <code>SELECT *</code></strong>：仅查询必要字段，减少网络传输与解析开销，提高覆盖索引利用率。</li><li><strong>小表驱动大表</strong>：<code>JOIN</code> 时确保小表作为驱动表。例如 1,000 行表 <code>JOIN</code> 1,000,000 行表时，小表驱动仅需 1,000 次大表索引扫描。</li><li><strong>用 <code>UNION ALL</code> 替代 <code>UNION</code></strong>：<code>UNION</code> 自带去重排序，数据量大时效率低；若无需去重，优先使用 <code>UNION ALL</code>。</li><li><strong>分页优化</strong>：避免深度分页，改用游标或条件过滤。<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 低效</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">-- 高效</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> table</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000000</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> LIMIT</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="表结构优化" tabindex="-1"><a class="header-anchor" href="#表结构优化"><span>表结构优化</span></a></h3><ul><li><strong>范式与反范式设计：</strong><ul><li><strong>范式设计：</strong> 减少数据冗余，保证数据一致性。</li><li><strong>反范式设计：</strong> 在某些场景下，为了避免多表 <code>JOIN</code> 带来的开销，可以适度引入冗余字段（反范式设计），将经常一起使用的列放在同一张表中。</li></ul></li><li><strong>选择最小数据类型：</strong> 优先选择能满足存储需求的最小数据类型。数据占用空间越小，磁盘 I/O 越少，内存缓存效率越高，性能越好。</li><li><strong>避免使用 <code>TEXT</code>、<code>BLOB</code> 数据类型存储大字段：</strong> 这类大字段会严重影响数据库性能。如果必须存储，应考虑将大字段分离到单独的扩展表中，主表只存储其引用地址。</li><li><strong>尽可能将列定义为 <code>NOT NULL</code>：</strong><ul><li>允许 <code>NULL</code> 值的列需要额外的存储空间来记录 <code>NULL</code> 标志位。</li><li>对 <code>NULL</code> 值进行比较和计算时，需要特殊处理，增加了复杂性和性能开销。</li></ul></li><li><strong>避免使用字符串存储日期：</strong> 使用 <code>DATETIME</code>、<code>TIMESTAMP</code> 或数值型时间戳存储日期。字符串存储日期占用空间更大，比较和计算效率低，且无法直接使用日期相关的函数。</li><li><strong>单表字段数量适中：</strong> 单表字段过多会降低查询效率。可以考虑将冷门字段数据与热门字段数据进行“冷热分离”，分成两张表。</li></ul><div class="hint-container example"><p class="hint-container-title">订单表冗余用户名称</p><ul><li>正常范式化设计：订单表（<code>orders</code>）只存储用户 ID（<code>user_id</code>），需要通过联表查询用户表（<code>users</code>）来获取用户名称（<code>user_name</code>）。</li><li>适度冗余设计：在订单表中直接存储用户名称（<code>user_name</code>），这样查询订单详情时无需联表，提高查询效率。</li></ul></div><h3 id="业务优化" tabindex="-1"><a class="header-anchor" href="#业务优化"><span>业务优化</span></a></h3><ul><li><strong>合理化业务需求：</strong> 重新评估和修改不合理的业务需求，例如避免深度分页（查询第 1000 页）。</li><li><strong>数据预计算与缓存：</strong> 对于报表数据（如 T+1 报表），不应实时计算，而是在业务低峰期提前计算好并存储或缓存。</li></ul><h3 id="架构优化" tabindex="-1"><a class="header-anchor" href="#架构优化"><span>架构优化</span></a></h3><ul><li><strong>读写分离：</strong> 将读操作和写操作分发到不同的数据库实例。主库负责写，从库负责读，可以显著提升数据库的并发处理能力。</li><li><strong>分库分表：</strong> 当单表数据量过大或并发量极高时，可以将数据分散到多个数据库实例或数据表中。这可以降低单表数据量，提升查询效率，但会引入数据路由、分布式事务等复杂性，需谨慎权衡。</li><li><strong>缓存机制：</strong> 使用 Redis、Memcached 等缓存中间件，将热点数据缓存到内存中，减轻数据库压力，提高响应速度。</li><li><strong>分布式数据库：</strong> 考虑使用 TiDB 等分布式数据库解决方案，它们原生支持高并发和大数据量，提供水平扩展能力。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><div class="hint-container question"><p class="hint-container-title">怎么优化慢 SQL？</p><ol><li><p><strong>定位问题</strong></p><ul><li>开启 <strong>慢查询日志</strong>，结合 <code>EXPLAIN</code>、<code>SHOW PROFILE</code>、<code>performance_schema</code> 等工具分析 SQL 的执行计划，确认是否是索引缺失、索引失效，还是表扫描、排序、锁等待等问题。</li><li>同时会关注 <strong>慢 SQL 出现场景</strong>（高并发还是单条查询就慢），确认是 <strong>SQL 本身问题</strong> 还是 <strong>资源瓶颈</strong>。</li></ul></li><li><p><strong>优化 SQL 和索引</strong></p><ul><li><strong>索引优化</strong>：检查是否能通过增加或调整联合索引覆盖查询，避免函数操作和隐式类型转换导致索引失效。</li><li><strong>SQL 优化</strong>：避免 <code>SELECT *</code>，合理使用 <code>JOIN</code>（小表驱动大表），避免深度分页（用条件过滤或游标方式），能用 <code>UNION ALL</code> 不用 <code>UNION</code>。</li></ul></li><li><p><strong>优化表结构</strong></p><ul><li>检查字段类型，避免字符串存日期、避免 <code>TEXT/BLOB</code> 大字段影响性能。</li><li>适度 <strong>反范式化</strong>，在热点查询中引入冗余字段，减少频繁的多表 <code>JOIN</code>。</li><li>将大字段或冷数据拆分（冷热分离）。</li></ul></li><li><p><strong>从业务层优化</strong></p><ul><li>深度分页查询（<code>LIMIT 1000000,10</code>）改用业务游标方式。</li><li>报表类场景采用 <strong>预计算/缓存</strong>，而不是实时跑复杂 SQL。</li></ul></li><li><p><strong>从架构层面优化</strong></p><ul><li>如果问题出在高并发或数据量过大，可以采用 <strong>读写分离</strong>、<strong>分库分表</strong>、<strong>缓存（Redis/Memcached）</strong>。</li><li>在数据量和并发都极高的场景下，考虑分布式数据库方案。</li></ul></li></ol></div><div class="hint-container example"><p class="hint-container-title">示例</p><p>有一次我们遇到一个订单查询接口特别慢，我先通过慢查询日志定位到 SQL，然后用 <code>EXPLAIN</code> 看执行计划，发现 <code>WHERE create_time</code> 上没有索引，导致全表扫描。最后我加了 <code>(user_id, create_time)</code> 联合索引，查询时间大幅减少。</p></div>`,21)]))}const r=s(n,[["render",t]]),h=JSON.parse('{"path":"/notes/interview/bsdyp3to/","title":"SQL优化最佳实践","lang":"zh-CN","frontmatter":{"title":"SQL优化最佳实践","createTime":"2025/08/30 15:47:30","permalink":"/notes/interview/bsdyp3to/"},"readingTime":{"minutes":6.2,"words":1859},"git":{"createdTime":1756719850000,"updatedTime":1756721248000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/MySQL/SQL优化最佳实践.md","headers":[]}');export{r as comp,h as data};
