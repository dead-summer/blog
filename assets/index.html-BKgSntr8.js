import{a as e,c as s,b as a,o as l}from"./app-CAzY0Upz.js";const n="/blog/assets/4-2.%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6-20250623153048532-C3npHXrW.png",t={};function d(o,i){return l(),s("div",null,i[0]||(i[0]=[a('<p>目前，日志记录的格式由 Spring Boot 默认提供。为了自定义日志格式，我们需要进行相应的配置。</p><h2 id="_1-当前日志记录格式分析" tabindex="-1"><a class="header-anchor" href="#_1-当前日志记录格式分析"><span><strong>1. 当前日志记录格式分析</strong></span></a></h2><p>现有的日志格式包含了以下关键信息：</p><img src="'+n+`" alt="4-2.日志输出格式控制-20250623153048532" width="750" style="display:block;margin:auto;"><ul><li>日期：记录日志的时间。</li><li>触发位置：触发日志记录的代码位置。</li><li>记录信息：具体的日志内容。</li><li>级别：日志的级别，用于筛选过滤，例如 INFO、DEBUG、ERROR 等。</li><li>PID：进程 ID，用于精准分析。</li><li>线程名：线程名称，同样用于精准分析。</li></ul><h2 id="_2-模拟官方日志模板" tabindex="-1"><a class="header-anchor" href="#_2-模拟官方日志模板"><span><strong>2. 模拟官方日志模板</strong></span></a></h2><p>下面是课程中模拟的官方日志模板，可供参考：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">logging</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  pattern</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%d %clr(%p) --- [%16t] %clr(%-40.40c){cyan} : %m %n</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码解释：</strong></p><p>这段 YAML 配置定义了控制台日志输出的格式。<code>logging.pattern.console</code> 指定了控制台日志的格式模式。</p><ul><li><code>%d</code>：日期，按照默认格式输出日期和时间。</li><li><code>%clr(%p)</code>：日志级别，<code>%p</code> 代表日志级别 (如 INFO, DEBUG, ERROR)，<code>%clr()</code> 用于给日志级别着色，使其更醒目。</li><li><code>---</code>：分隔符，用于分隔不同的信息字段。</li><li><code>[%16t]</code>：线程名，<code>%t</code> 代表线程名，<code>16</code> 指定线程名输出的最小宽度为 16 个字符。</li><li><code>%clr(%-40.40c){cyan}</code>：类名，<code>%c</code> 代表类名，<code>-40.40</code> 指定类名输出的最小和最大宽度都为 40 个字符，<code>{cyan}</code> 用于将类名着色为青色。</li><li><code>:</code>：分隔符，用于分隔类名和日志消息。</li><li><code>%m</code>：日志消息，即实际要输出的日志内容。</li><li><code>%n</code>：换行符，用于在每条日志消息后换行。</li></ul><p>通过自定义日志输出格式，可以更清晰地了解应用程序的运行状态。在实际应用中，还需要了解日志的存储方式，以便更好地管理和分析日志数据。</p>`,12)]))}const r=e(t,[["render",d]]),p=JSON.parse('{"path":"/notes/HMSpringBoot/oynfi7ug/","title":"4-2.日志输出格式控制","lang":"zh-CN","frontmatter":{"title":"4-2.日志输出格式控制","createTime":"2025/06/23 15:27:50","permalink":"/notes/HMSpringBoot/oynfi7ug/"},"readingTime":{"minutes":1.73,"words":520},"git":{"createdTime":1752578290000,"updatedTime":1752578290000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员SpringBoot/2.运维实用篇/4.日志/4-2.日志输出格式控制.md","headers":[]}');export{r as comp,p as data};
