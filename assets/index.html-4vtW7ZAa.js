import{a,c as o,b as c,o as d}from"./app-CAzY0Upz.js";const t="/blog/assets/6.%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6-20250701195438653-CxrQVhao.png",n="/blog/assets/6.%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6-20250701195507546-CbZB_CRw.png",r={};function s(i,e){return d(),o("div",null,e[0]||(e[0]=[c('<p>本节主要讲解 Java 方法参数的传递机制，重点在于区分基本类型和引用类型参数传递时的差异。</p><p><strong>核心概念：Java 的参数传递机制是值传递。</strong></p><p>值传递的含义：在将实际参数 (实参) 传递给方法的形式参数 (形参) 时，传递的是实参变量中存储的值的副本。</p><ul><li><strong>形参</strong>：方法定义中声明的参数。</li><li><strong>实参</strong>：调用方法时实际传递给方法的参数。</li></ul><h2 id="_6-1-参数传递的基本类型数据" tabindex="-1"><a class="header-anchor" href="#_6-1-参数传递的基本类型数据"><span>6.1 参数传递的基本类型数据</span></a></h2><p>当方法参数是基本类型数据时，传递的是实参变量所存储的<strong>值的副本</strong>。这意味着在方法内部对形参的修改不会影响到实参本身。</p><img src="'+t+'" alt="6.方法参数的传递机制-20250701195438653" width="750" style="display:block;margin:auto;"><p>main 方法中有一个变量 <code>num</code> 值为 10，调用 <code>change</code> 方法时，将 <code>num</code> 的值复制一份传递给 <code>change</code> 方法中的形参 <code>num</code>。在 <code>change</code> 方法中，<code>num</code> 的值被修改为 20，但 main 方法中的 <code>num</code> 的值仍然是 10，没有发生改变。</p><h2 id="_6-2-参数传递的是引用数据类型" tabindex="-1"><a class="header-anchor" href="#_6-2-参数传递的是引用数据类型"><span>6.2 参数传递的是引用数据类型</span></a></h2><p>当方法参数是引用类型的数据时，传递的是实参变量所存储的<strong>地址值的副本</strong>。 此时，形参和实参指向的是内存中的同一个对象。 因此，在方法内部通过形参对对象进行的修改会影响到实参所指向的原始对象。</p><img src="'+n+'" alt="6.方法参数的传递机制-20250701195507546" width="750" style="display:block;margin:auto;"><p>main 方法中有一个数组 <code>arrs</code>，存储的是一个地址值，指向堆内存中的一个数组对象。调用 <code>change</code> 方法时，将 <code>arrs</code> 中存储的地址值复制一份传递给 <code>change</code> 方法中的形参 <code>arrs</code>。在 <code>change</code> 方法中，通过 <code>arrs</code> 修改了数组中的元素，由于 main 方法中的 <code>arrs</code> 和 <code>change</code> 方法中的 <code>arrs</code> 指向的是同一个数组对象，所以 main 方法中访问 <code>arrs</code> 时，元素已经被修改了。</p><p>调用 <code>change</code> 方法时参数是引用类型，实际上也是值传递，只不过参数传递存储的地址值。 此时 <code>change</code> 方法和 <code>main</code> 方法中两个方法中各自有一个变量 <code>arrs</code>，这两个变量记录的是同一个地址值 <code>[I@4c873330</code>，<code>change</code> 方法把数组中的元素改了，<code>main</code> 方法在访问时，元素已经被修改了。</p><p>总而言之，无论是基本类型还是引用类型，Java 的参数传递都是值传递。对于基本类型，传递的是值的副本；对于引用类型，传递的是地址值的副本。 理解这一点对于编写正确的 Java 代码至关重要，尤其是在处理对象之间的关系时。</p>',14)]))}const p=a(r,[["render",s]]),g=JSON.parse('{"path":"/notes/HMJava/267x1yeg/","title":"方法参数的传递机制","lang":"zh-CN","frontmatter":{"title":"方法参数的传递机制","createTime":"2025/07/01 19:52:25","permalink":"/notes/HMJava/267x1yeg/"},"readingTime":{"minutes":2.6,"words":781},"git":{"createdTime":1752578196000,"updatedTime":1752578196000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员Java/1.基础入门/5.方法/6.方法参数的传递机制.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"7d7e6e","sort":10001,"name":"黑马程序员Java"},{"id":"31ae4c","sort":1,"name":"基础入门"},{"id":"8025fb","sort":5,"name":"方法"}]}');export{p as comp,g as data};
