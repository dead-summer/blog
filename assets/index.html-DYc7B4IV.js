import{a as r,c as n,b as e,o as i}from"./app-CAzY0Upz.js";const s={};function d(a,t){return i(),n("div",null,t[0]||(t[0]=[e('<p>三者的核心区别主要体现在<strong>不可变性</strong>、<strong>线程安全性</strong>和<strong>性能</strong>三个方面，主要应用于 Java 字符串处理场景。</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><ul><li><strong>不可变性</strong>：String 对象一旦创建，其内容不可修改。任何修改操作（如拼接、替换）都会生成新的 String 对象。</li><li><strong>线程安全</strong>：由于不可变性，多线程环境下可安全共享同一 String 对象，无需额外同步措施。</li></ul><ul><li><strong>性能影响</strong>：频繁修改会导致大量对象创建和垃圾回收，降低性能。</li><li><strong>适用场景</strong>：字符串内容不常变化的场景（如配置信息）。</li></ul><h2 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer"><span>StringBuffer</span></a></h2><ul><li><strong>可变性</strong>：允许直接修改对象内容（如 <code>append()</code>、<code>insert()</code>），不会创建新对象。</li><li><strong>线程安全</strong>：所有关键方法使用 <code>synchronized</code> 修饰，保证多线程环境下的操作安全。</li></ul><ul><li><strong>性能特点</strong>：线程安全机制带来额外性能开销。</li><li><strong>适用场景</strong>：多线程环境下需要频繁修改字符串（如并发日志处理）。</li></ul><h2 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder"><span>StringBuilder</span></a></h2><ul><li><strong>可变性</strong>：与 StringBuffer 类似，支持原位修改操作。</li><li><strong>非线程安全</strong>：方法未同步，多线程操作可能导致数据不一致。</li></ul><ul><li><strong>性能特点</strong>：无同步开销，单线程下性能优于 StringBuffer（通常快 10%-15%）。</li><li><strong>适用场景</strong>：单线程环境下需要高频字符串操作（如循环拼接 SQL）。</li></ul><h2 id="总结与使用场景" tabindex="-1"><a class="header-anchor" href="#总结与使用场景"><span>总结与使用场景</span></a></h2><table><thead><tr><th><strong>特性</strong></th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td><strong>可变性</strong></td><td>❌ 不可变</td><td>✔️ 可变</td><td>✔️ 可变</td></tr><tr><td><strong>线程安全</strong></td><td>✔️（天然安全）</td><td>✔️（同步锁）</td><td>❌ 非线程安全</td></tr><tr><td><strong>性能</strong></td><td>修改操作慢</td><td>中等（同步开销）</td><td>最高（无同步）</td></tr><tr><td><strong>适用场景</strong></td><td>静态字符串</td><td>多线程字符串操作</td><td>单线程字符串操作</td></tr></tbody></table>',12)]))}const g=r(s,[["render",d]]),l=JSON.parse('{"path":"/notes/interview/0lhutr52/","title":"String、StringBuffer和StringBuilder的区别","lang":"zh-CN","frontmatter":{"title":"String、StringBuffer和StringBuilder的区别","createTime":"2025/09/04 16:57:10","permalink":"/notes/interview/0lhutr52/"},"readingTime":{"minutes":1.47,"words":441},"git":{"createdTime":1757065260000,"updatedTime":1757065260000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/Java基础/String、StringBuffer和StringBuilder的区别.md","headers":[]}');export{g as comp,l as data};
