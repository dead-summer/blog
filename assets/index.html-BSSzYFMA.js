import{a as e,c as a,b as n,o as d}from"./app-CAzY0Upz.js";const l={};function i(s,t){return d(),a("div",null,t[0]||(t[0]=[n('<p>动态代理是一种在程序运行时（而非编译时）动态生成代理对象的技术。它允许在不修改原始类的情况下，通过代理对象拦截对目标对象的方法调用，并在调用前后执行自定义逻辑或增强操作。</p><p>目前主流的动态代理实现方式主要有两种：JDK 动态代理和 Cglib 动态代理。</p><h2 id="jdk-动态代理" tabindex="-1"><a class="header-anchor" href="#jdk-动态代理"><span>JDK 动态代理</span></a></h2><p>JDK 动态代理是 Java 官方提供的一种动态代理方式。</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>JDK 动态代理在运行时，会为目标对象所实现的接口动态生成一个实现类（即代理类）。这个代理类实现了目标对象的所有接口，并且在接口方法的实现中包含了增强逻辑以及通过反射调用目标对象原始方法的代码。</p><h3 id="限制" tabindex="-1"><a class="header-anchor" href="#限制"><span>限制</span></a></h3><p>使用 JDK 动态代理有一个核心限制：目标类必须实现至少一个接口。如果目标类没有实现任何接口，则无法使用 JDK 动态代理。</p><h3 id="调用过程" tabindex="-1"><a class="header-anchor" href="#调用过程"><span>调用过程</span></a></h3><p>当客户端调用代理对象的方法时，实际上会调用到代理类中对应的方法。在代理类的方法中，会首先执行预设的增强逻辑，然后通过反射机制调用目标对象的原始方法，最后再执行后续的增强逻辑。</p><h2 id="cglib-动态代理" tabindex="-1"><a class="header-anchor" href="#cglib-动态代理"><span>Cglib 动态代理</span></a></h2><p>Cglib（Code Generation Library）是一个强大的高性能字节码生成库，它可以在运行时扩展 Java 类和实现 Java 接口。</p><h3 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1"><span>原理</span></a></h3><p>Cglib 动态代理在运行时，会动态生成目标类的一个子类（即代理类），并重写父类（目标类）的所有非 <code>final</code> 方法，在重写的方法中加入增强代码。Cglib 底层通过 ASM（一个轻量级的字节码处理框架）来转换和生成字节码。</p><h3 id="限制-1" tabindex="-1"><a class="header-anchor" href="#限制-1"><span>限制</span></a></h3><p>如果目标类是被 <code>final</code> 修饰的，则不能使用 Cglib 代理，因为 <code>final</code> 类不能被继承。同样，如果目标方法是 <code>final</code> 或 <code>private</code> 的，也无法被 Cglib 代理。</p><h3 id="调用过程-1" tabindex="-1"><a class="header-anchor" href="#调用过程-1"><span>调用过程</span></a></h3><p>当客户端调用代理对象的方法时，实际上会调用到 Cglib 生成的子类中重写的方法。在这个重写方法中，会执行增强逻辑，然后直接调用父类（目标类）对应的原始方法。</p><h2 id="两种动态代理方式的对比" tabindex="-1"><a class="header-anchor" href="#两种动态代理方式的对比"><span>两种动态代理方式的对比</span></a></h2><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">JDK 动态代理</th><th style="text-align:left;">Cglib 动态代理</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>原理</strong></td><td style="text-align:left;">基于接口生成代理类</td><td style="text-align:left;">基于继承生成代理类（生成目标类的子类）</td></tr><tr><td style="text-align:left;"><strong>代理对象生成速度</strong></td><td style="text-align:left;">相对较快</td><td style="text-align:left;">相对较慢（需要生成新的字节码文件并加载）</td></tr><tr><td style="text-align:left;"><strong>方法调用速度</strong></td><td style="text-align:left;">涉及到反射调用目标方法，性能开销相对较大</td><td style="text-align:left;">直接调用父类方法，性能开销相对较小</td></tr><tr><td style="text-align:left;"><strong>能否代理无接口类</strong></td><td style="text-align:left;">不能，目标类必须实现接口</td><td style="text-align:left;">能，只要目标类不是 <code>final</code> 的，且方法不是 <code>final</code></td></tr><tr><td style="text-align:left;"><strong>底层技术</strong></td><td style="text-align:left;">Java 反射 API</td><td style="text-align:left;">ASM 字节码生成框架</td></tr></tbody></table><div class="hint-container note"><p class="hint-container-title">注</p><p>随着 JDK 版本的不断升级，JVM 对反射机制的优化也在持续进行，JDK 动态代理的调用性能已显著提升，在某些场景下甚至可能超越 Cglib。</p></div>',21)]))}const o=e(l,[["render",i]]),h=JSON.parse('{"path":"/notes/interview/h85v3qig/","title":"动态代理","lang":"zh-CN","frontmatter":{"title":"动态代理","createTime":"2025/09/04 15:21:22","permalink":"/notes/interview/h85v3qig/"},"readingTime":{"minutes":2.81,"words":844},"git":{"createdTime":1757065260000,"updatedTime":1757065260000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/Java基础/动态代理.md","headers":[]}');export{o as comp,h as data};
