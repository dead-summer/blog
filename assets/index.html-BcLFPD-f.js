import{a as i,c as a,b as e,o as t}from"./app-CAzY0Upz.js";const n={};function d(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<p>深拷贝（Deep Copy）和浅拷贝（Shallow Copy）是对象复制中的两种核心方法，主要区别在于拷贝的深度以及对原始对象内部结构的影响。</p><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h2><p>浅拷贝创建一个新对象，但仅复制原始对象的基本数据类型字段（如 <code>int</code>、<code>char</code>）和引用类型字段的地址（即指针），而不复制引用指向的实际对象。</p><ul><li><strong>核心特点</strong>： <ul><li>新对象与原始对象共享引用类型字段指向的同一对象。</li><li>修改新对象的引用类型字段会影响原始对象，因为它们指向同一内存地址。</li></ul></li><li><strong>适用场景</strong>：适用于对象结构简单、引用类型字段不可变或无需独立修改的场景（如 Java 中的 <code>Arrays.copyOf()</code> 方法）。</li><li><strong>风险</strong>：共享引用可能导致意外的副作用，破坏数据一致性。</li></ul><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h2><p>深拷贝创建一个新对象，并递归复制原始对象的所有字段及其引用的对象，生成一个完全独立的副本。</p><ul><li><strong>核心特点</strong>： <ul><li>新对象与原始对象的所有字段（包括引用类型）均独立存储，不共享任何内存地址。</li><li>修改新对象不会影响原始对象，确保数据隔离。</li></ul></li><li><strong>适用场景</strong>：适用于对象结构复杂、引用类型字段需独立修改的场景（如 Java 中通过序列化或自定义递归复制实现）。</li><li><strong>实现方式</strong>：通常通过递归遍历对象图（Object Graph），为每个嵌套对象创建新实例。</li></ul><h2 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明"><span>示例说明</span></a></h2><p>以 Java 中的 <code>User</code> 和 <code>Address</code> 类为例，演示浅拷贝与深拷贝的区别：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> User</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 基本数据类型字段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> password</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 基本数据类型字段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Address</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> address</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 引用类型字段</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Address</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> province</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 基本数据类型字段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> city</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 基本数据类型字段</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> area</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 基本数据类型字段</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>浅拷贝场景</strong>： <ul><li>拷贝 <code>User</code> 对象 <code>user1</code> 到 <code>user2</code> 时，<code>user2</code> 是一个新对象（地址不同），但 <code>user2.address</code> 与 <code>user1.address</code> 共享同一 <code>Address</code> 实例。</li><li>修改 <code>user2.address.city</code> 会导致 <code>user1.address.city</code> 同步变化。</li></ul></li><li><strong>深拷贝场景</strong>： <ul><li>拷贝 <code>User</code> 对象 <code>user1</code> 到 <code>user2</code> 时，<code>user2.address</code> 是一个全新的 <code>Address</code> 对象（地址不同）。</li><li>修改 <code>user2.address.city</code> 不会影响 <code>user1.address.city</code>。</li></ul></li></ul><h2 id="关键区别总结" tabindex="-1"><a class="header-anchor" href="#关键区别总结"><span>关键区别总结</span></a></h2><table><thead><tr><th>特性</th><th>浅拷贝</th><th>深拷贝</th></tr></thead><tbody><tr><td><strong>拷贝深度</strong></td><td>仅复制基本类型和引用地址</td><td>递归复制所有字段及引用对象</td></tr><tr><td><strong>内存共享</strong></td><td>引用类型字段共享对象</td><td>所有字段独立存储</td></tr><tr><td><strong>影响范围</strong></td><td>修改副本可能影响原始对象</td><td>修改副本不影响原始对象</td></tr><tr><td><strong>性能开销</strong></td><td>较低（仅需复制引用）</td><td>较高（需递归复制整个对象图）</td></tr><tr><td><strong>典型实现</strong></td><td>Java 的 <code>Object.clone()</code>（默认）</td><td>Java 的序列化或自定义递归复制逻辑</td></tr></tbody></table>`,13)]))}const h=i(n,[["render",d]]),p=JSON.parse('{"path":"/notes/interview/ufhvsd0g/","title":"深拷贝与浅拷贝","lang":"zh-CN","frontmatter":{"title":"深拷贝与浅拷贝","createTime":"2025/09/04 17:34:12","permalink":"/notes/interview/ufhvsd0g/"},"readingTime":{"minutes":2.48,"words":743},"git":{"createdTime":1757065260000,"updatedTime":1757065260000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/Java基础/深拷贝与浅拷贝.md","headers":[]}');export{h as comp,p as data};
