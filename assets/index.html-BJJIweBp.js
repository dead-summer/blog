import{a as i,c as a,b as e,o as l}from"./app-CAzY0Upz.js";const n="/blog/assets/5.%E6%96%B9%E6%B3%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86-20250701194030019-BLUu8F-r.png",t="/blog/assets/5.%E6%96%B9%E6%B3%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86-20250701194236585-uV7SWaC1.png",d="/blog/assets/5.%E6%96%B9%E6%B3%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86-20250701194833360-CgpoYXnY.png",h={};function p(k,s){return l(),a("div",null,s[0]||(s[0]=[e('<h2 id="_5-1-方法执行的内存区域" tabindex="-1"><a class="header-anchor" href="#_5-1-方法执行的内存区域"><span>5.1 方法执行的内存区域</span></a></h2><p>Java 程序的运行在内存中进行，内存区域主要分为栈、堆和方法区。Java 方法在<strong>栈内存</strong>中执行。</p><p>每次调用方法，该方法都会进栈执行；执行完毕后，又会弹栈出去。这个过程类似于手枪子弹夹的上子弹和击发子弹的过程，即“先进后出，后进先出”。</p><p>假设在 <code>main</code> 方法中依次调用 A 方法、B 方法、C 方法，其在内存中的执行流程如下：</p><ol><li>每次调用方法，方法都会从栈顶压栈执行。</li><li>每个方法执行完后，会从栈顶弹栈出去。</li></ol><img src="'+n+`" alt="5.方法在计算机中的执行原理-20250701194030019" width="750" style="display:block;margin:auto;"><h2 id="_5-2-有返回值的方法的内存分析" tabindex="-1"><a class="header-anchor" href="#_5-2-有返回值的方法的内存分析"><span>5.2 有返回值的方法的内存分析</span></a></h2><p>以下代码展示了计算两个整数和的方法在内存中的执行原理。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MethodDemo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ){</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码解释：</strong></p><ul><li><code>main</code> 方法首先调用 <code>sum</code> 方法，并将 <code>10</code> 和 <code>20</code> 作为参数传递给 <code>a</code> 和 <code>b</code>。</li><li><code>sum</code> 方法计算 <code>a</code> 和 <code>b</code> 的和，将结果赋值给变量 <code>c</code>。</li><li><code>sum</code> 方法通过 <code>return c;</code> 将计算结果返回给 <code>main</code> 方法。</li><li><code>main</code> 方法接收到返回值后，将其赋值给变量 <code>rs</code>，然后打印 <code>rs</code> 的值。</li></ul><p><strong>内存执行过程：</strong></p><div class="vp-steps"><p><strong>1. 类加载（方法区）：</strong></p><ul><li>首先，<code>MethodDemo.class</code> 字节码文件被加载到 JVM 的方法区（Method Area）。方法区是所有线程共享的内存区域，用于存储类信息、静态变量、常量等。</li><li>在类加载的过程中，<code>main</code> 方法和 <code>sum</code> 方法的代码也被加载到方法区。</li></ul><p><strong>2. <code>main</code> 方法开始执行（栈内存）：</strong></p><ul><li>JVM 创建一个栈帧（Stack Frame）来执行 <code>main</code> 方法。 栈帧 是用于支持虚拟机进行方法调用和方法执行的数据结构，包含局部变量表、操作数栈、动态链接、方法出口等信息。</li><li><code>main</code> 方法的栈帧被压入 Java 虚拟机栈（JVM Stack）。 JVM 栈是线程私有的，每个线程都有一个栈，用于存储当前正在执行的方法的栈帧。</li></ul><p><strong>3. 调用 <code>sum</code> 方法（栈内存）：</strong></p><ul><li>在 <code>main</code> 方法中，执行 <code>int rs = sum(10, 20);</code> 语句，调用 <code>sum</code> 方法。</li></ul><p><strong>4. <code>sum</code> 方法进栈（栈内存）：</strong></p><ul><li>JVM 为 <code>sum</code> 方法创建一个新的栈帧。</li><li><code>sum</code> 方法的栈帧被压入 JVM 栈， 成为当前栈顶帧。</li></ul><p><strong>5. <code>sum</code> 方法栈帧中的内存分配（栈内存）：</strong></p><ul><li>在 <code>sum</code> 方法的栈帧中，为局部变量 <code>a</code> 和 <code>b</code> 分配内存空间。</li></ul><p><strong>6. 传递参数（栈内存）：</strong></p><ul><li>将 <code>main</code> 方法传递的参数 10 和 20 分别赋值给 <code>sum</code> 方法栈帧中的局部变量 <code>a</code> 和 <code>b</code>。<code>a</code> 的值为 10，<code>b</code> 的值为 20。</li></ul><p><strong>7. 执行 <code>sum</code> 方法的计算（栈内存）：</strong></p><ul><li>在 <code>sum</code> 方法中，执行 <code>int c = a + b;</code> 语句，计算 <code>a + b</code> 的结果，并将结果赋值给局部变量 <code>c</code>。</li><li><code>c</code> 的值为 30。</li></ul><p><strong>8. <code>sum</code> 方法返回（栈内存）：</strong></p><ul><li>执行 <code>return c;</code> 语句，<code>sum</code> 方法将 <code>c</code> 的值（即 30）返回给调用者 <code>main</code> 方法。在这一步，<code>sum</code> 方法的栈帧从 Java 虚拟机栈中弹出。</li></ul><p><strong>9. <code>main</code> 方法接收返回值（栈内存）：</strong></p><ul><li><code>main</code> 方法接收 <code>sum</code> 方法返回的值 30，并将其赋值给局部变量 <code>rs</code>。</li></ul><p><strong>10. 输出结果（栈内存）：</strong></p><ul><li><code>main</code> 方法在堆中构造 <code>System.out</code>, 在方法区找到 <code>println</code> 方法，通过传递参数 <code>rs</code>, 在控制台打印出 30。</li></ul><img src="`+t+`" alt="5.方法在计算机中的执行原理-20250701194236585" width="750" style="display:block;margin:auto;"></div><h2 id="_5-3-无返回值的方法的内存分析" tabindex="-1"><a class="header-anchor" href="#_5-3-无返回值的方法的内存分析"><span>5.3 无返回值的方法的内存分析</span></a></h2><p>接下来分析一个无返回值、无参数的方法的内存原理。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Demo2Method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        study</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> study</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">		eat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">		System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">学习</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">		sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> eat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">吃饭</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sleep</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">睡觉</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码解释：</strong></p><ul><li><code>main</code> 方法调用 <code>study</code> 方法。</li><li><code>study</code> 方法依次调用 <code>eat</code> 方法、打印 &quot; 学习 &quot;、调用 <code>sleep</code> 方法。</li><li><code>eat</code> 方法打印 &quot; 吃饭 &quot;。</li><li><code>sleep</code> 方法打印 &quot; 睡觉 &quot;。</li></ul><p><strong>内存执行过程：</strong></p><div class="vp-steps"><p><strong>1. 类加载（方法区）：</strong></p><ul><li><code>Demo2Method.class</code> 字节码文件被加载到方法区。</li><li><code>main</code>、<code>study</code>、<code>eat</code>、<code>sleep</code> 方法的相关信息（代码、常量等）也被加载到方法区。</li></ul><p><strong>2. <code>main</code> 方法进栈 (栈内存):</strong></p><ul><li>JVM 创建 <code>main</code> 方法的栈帧，并将其压入 JVM 栈。</li><li><code>main</code> 方法的栈帧成为当前的栈顶帧。</li></ul><p><strong>3. 调用 <code>study</code> 方法 (栈内存):</strong></p><ul><li><code>main</code> 方法执行 <code>study()</code> 语句，调用 <code>study</code> 方法。</li></ul><p><strong>4. <code>study</code> 方法进栈 (栈内存):</strong></p><ul><li>JVM 创建 <code>study</code> 方法的栈帧，并将其压入 JVM 栈。</li><li><code>study</code> 方法的栈帧成为当前的栈顶帧。</li></ul><p><strong>5. 调用 <code>eat</code> 方法（栈内存）：</strong></p><ul><li><code>study</code> 方法执行 <code>eat()</code> 语句，调用 <code>eat</code> 方法。</li></ul><p><strong>6. <code>eat</code> 方法进栈，执行并出栈（栈内存）：</strong></p><ul><li>JVM 创建 <code>eat</code> 方法的栈帧，并将其压入 JVM 栈。</li><li><code>eat</code> 方法的栈帧成为当前的栈顶帧。</li><li><code>eat</code> 方法执行 <code>System.out.println(&quot;吃饭&quot;);</code> 语句，在控制台打印 &quot; 吃饭 &quot;。</li><li><code>eat</code> 方法执行完毕，其栈帧从 JVM 栈中弹出（出栈）。控制权返回到 <code>study</code> 方法。</li></ul><p><strong>7. 执行 <code>study</code> 方法剩下的代码，打印 &quot; 学习 &quot; (栈内存):</strong></p><ul><li><code>study</code> 方法执行 <code>System.out.println(&quot;学习&quot;);</code> 语句，在控制台打印 &quot; 学习 &quot;。</li></ul><p><strong>8. 调用 <code>sleep</code> 方法 (栈内存):</strong></p><ul><li><code>study</code> 方法执行 <code>sleep()</code> 语句，调用 <code>sleep</code> 方法。</li></ul><p><strong>9. <code>sleep</code> 方法进栈，执行并出栈（栈内存）：</strong></p><ul><li>JVM 创建 <code>sleep</code> 方法的栈帧，并将其压入 JVM 栈。</li><li><code>sleep</code> 方法的栈帧成为当前栈顶帧.</li><li><code>sleep</code> 方法执行 <code>System.out.println(&quot;睡觉&quot;);</code> 语句，在控制台打印 &quot; 睡觉 &quot;。</li><li><code>sleep</code> 方法执行完毕，其栈帧从 JVM 栈中弹出（出栈）。控制权返回到 <code>study</code> 方法。</li></ul><p><strong>10. <code>study</code> 方法执行完成并出栈 (栈内存):</strong></p><ul><li><code>study</code> 方法执行完毕，其栈帧从 JVM 栈中弹出（出栈）。控制权返回到 <code>main</code> 方法。</li></ul><p><strong>11. <code>main</code> 方法执行完成并出栈 (栈内存):</strong></p><ul><li><code>main</code> 方法执行完毕，其栈帧从 JVM 栈中弹出（出栈）。</li><li>JVM 结束运行。</li></ul><img src="`+d+'" alt="5.方法在计算机中的执行原理-20250701194833360" width="750" style="display:block;margin:auto;"></div>',20)]))}const c=i(h,[["render",p]]),r=JSON.parse('{"path":"/notes/HMJava/4ylxc1oz/","title":"方法在计算机中的执行原理","lang":"zh-CN","frontmatter":{"title":"方法在计算机中的执行原理","createTime":"2025/07/01 19:38:38","permalink":"/notes/HMJava/4ylxc1oz/"},"readingTime":{"minutes":5.53,"words":1659},"git":{"createdTime":1752578196000,"updatedTime":1752578196000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员Java/1.基础入门/5.方法/5.方法在计算机中的执行原理.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"7d7e6e","sort":10001,"name":"黑马程序员Java"},{"id":"31ae4c","sort":1,"name":"基础入门"},{"id":"8025fb","sort":5,"name":"方法"}]}');export{c as comp,r as data};
