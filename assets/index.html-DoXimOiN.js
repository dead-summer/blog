import{a,c as e,b as s,o as r}from"./app-CAzY0Upz.js";const n={};function d(o,t){return r(),e("div",null,t[0]||(t[0]=[s('<p>Redis 是一种键值型 NoSQL 数据库，其中包含两个关键概念：键值型和 NoSQL。</p><ul><li><strong>键值型</strong>：Redis 中存储的数据以 key-value 对的形式存在。Value 的形式多样，可以是字符串、数值，甚至是 JSON。</li><li><strong>NoSQL</strong>：相对于传统关系型数据库而言的一种特殊数据库。</li></ul><h2 id="_1-1-认识-nosql" tabindex="-1"><a class="header-anchor" href="#_1-1-认识-nosql"><span>1.1 认识 NoSQL</span></a></h2><p><strong>NoSQL</strong> 可以理解为 &quot;Not Only SQL&quot;（不仅仅是 SQL）或 &quot;No SQL&quot;（非 SQL）数据库。它是一种与传统关系型数据库有很大差异的数据库，也被称为<strong>非关系型数据库</strong>。</p><h3 id="_1-1-1-结构化与非结构化" tabindex="-1"><a class="header-anchor" href="#_1-1-1-结构化与非结构化"><span>1.1.1 结构化与非结构化</span></a></h3><p>传统关系型数据库存储的是结构化数据，每张表都有严格的约束，包括字段名、数据类型和约束等。插入的数据必须遵守这些约束。</p><p>而 NoSQL 数据库对数据格式没有严格约束，形式松散且自由。它可以是键值型、文档型或图格式。</p><h3 id="_1-1-2-关联和非关联" tabindex="-1"><a class="header-anchor" href="#_1-1-2-关联和非关联"><span>1.1.2 关联和非关联</span></a></h3><p>传统关系型数据库的表之间通常存在关联，例如外键。</p><p>而非关系型数据库不存在关联关系。要维护关系，要么依赖代码中的业务逻辑，要么依赖数据之间的耦合。</p><h3 id="_1-1-3-查询方式" tabindex="-1"><a class="header-anchor" href="#_1-1-3-查询方式"><span>1.1.3 查询方式</span></a></h3><p>传统关系型数据库使用 SQL 语句进行查询，语法有统一的标准。</p><p>而非关系型数据库的查询语法差异很大，各种各样。</p><h3 id="_1-1-4-事务" tabindex="-1"><a class="header-anchor" href="#_1-1-4-事务"><span>1.1.4 事务</span></a></h3><p>传统关系型数据库满足事务的 ACID 原则（原子性、一致性、隔离性、持久性）。</p><p>而非关系型数据库通常不支持事务，或者不能严格保证 ACID 特性，只能实现基本的一致性。</p><h3 id="_1-1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-1-5-总结"><span>1.1.5 总结</span></a></h3><p>除了上述四点，关系型数据库和非关系型数据库在存储方式、扩展性和查询性能上也有显著差异，如下表所示：</p><table><thead><tr><th>特性</th><th>关系型数据库</th><th>非关系型数据库</th></tr></thead><tbody><tr><td>存储方式</td><td>基于磁盘，涉及大量磁盘 IO，对性能有影响</td><td>更多依赖内存操作，读写速度快，性能较好</td></tr><tr><td>扩展性</td><td>垂直扩展（主从模式，数据一致，用于数据备份）</td><td>水平扩展（数据拆分存储在不同机器上，可存储海量数据，解决内存限制问题）</td></tr><tr><td>关联关系</td><td>表之间存在关联关系，水平扩展会给数据查询带来麻烦</td><td>无关联关系，通过业务逻辑或数据耦合维护关系</td></tr></tbody></table><p>因此，在选择数据库时，需要根据具体的应用场景和需求，综合考虑各种因素。</p><h2 id="_1-2-认识-redis" tabindex="-1"><a class="header-anchor" href="#_1-2-认识-redis"><span>1.2 认识 Redis</span></a></h2><p>Redis 诞生于 2009 年，全称是 <strong>Re</strong>mote <strong>D</strong>ictionary <strong>S</strong>erver（远程字典服务器），是一个基于内存的键值型 NoSQL 数据库。</p><p><strong>Redis 的主要特征包括：</strong></p><ul><li><strong>键值（key-value）型</strong>：Value 支持多种不同的数据结构，功能丰富。</li><li><strong>单线程</strong>：每个命令具备原子性。</li><li><strong>低延迟，速度快</strong>：基于内存、IO 多路复用和良好的编码。</li><li><strong>支持数据持久化</strong>：可以将数据保存到磁盘上，防止数据丢失。</li><li><strong>支持主从集群、分片集群</strong>：可以提高 Redis 的可用性和扩展性。</li><li><strong>支持多语言客户端</strong>：可以使用多种编程语言来操作 Redis。</li></ul>',24)]))}const p=a(n,[["render",d]]),l=JSON.parse('{"path":"/notes/HMRedis/e1payz4v/","title":"初识Redis","lang":"zh-CN","frontmatter":{"title":"初识Redis","createTime":"2025/06/25 14:39:11","permalink":"/notes/HMRedis/e1payz4v/"},"readingTime":{"minutes":2.82,"words":847},"git":{"createdTime":1752578302000,"updatedTime":1752578302000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员Redis/1.基础篇/1.初识Redis.md","headers":[]}');export{p as comp,l as data};
