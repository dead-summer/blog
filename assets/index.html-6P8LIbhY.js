import{a as e,c as n,b as i,d as l,r as t,o as h}from"./app-CAzY0Upz.js";const d={};function k(r,s){const a=t("Mermaid");return h(),n("div",null,[s[0]||(s[0]=i('<h2 id="线程状态及流转" tabindex="-1"><a class="header-anchor" href="#线程状态及流转"><span>线程状态及流转</span></a></h2><p>在 Java 中，线程的状态由 <code>java.lang.Thread.State</code> 枚举类定义，共包含六种状态。这些状态描述了线程生命周期的不同阶段及其流转关系。</p><h3 id="java-线程状态定义" tabindex="-1"><a class="header-anchor" href="#java-线程状态定义"><span>Java 线程状态定义</span></a></h3><ol><li><strong><code>NEW</code>（新建状态）</strong>：线程对象通过 <code>new Thread()</code> 创建后即处于此状态。此时线程尚未启动，尚未分配系统资源。</li><li><strong><code>RUNNABLE</code>（就绪状态/可运行状态）</strong>：调用 <code>start()</code> 方法后，线程进入此状态。它表示线程已准备好运行，可能正在等待 CPU 调度或正在执行。在 Java 状态模型中，运行中的线程也归属于 RUNNABLE 状态（无单独的 &quot; 运行 &quot; 状态）。</li><li><strong><code>BLOCKED</code>（阻塞状态）</strong>：当线程尝试获取一个对象锁（如 <code>synchronized</code> 代码块或方法）而锁被其他线程持有时，线程进入此状态，等待锁释放。</li><li><strong><code>WAITING</code>（等待状态）</strong>：当线程调用 <code>Object.wait()</code> 方法时进入此状态，表示无限期等待其他线程的通知（如 <code>notify()</code> 或 <code>notifyAll()</code>）。</li><li><strong><code>TIMED_WAITING</code>（计时等待状态）</strong>：当线程调用 <code>Thread.sleep(long millis)</code> 或带超时的 <code>Object.wait(long timeout)</code> 方法时进入此状态，表示在指定时间内等待。</li><li><strong><code>TERMINATED</code>（结束状态）</strong>：线程的 <code>run()</code> 方法执行完毕后进入此状态，表示线程生命周期结束，无法再次启动。</li></ol><h3 id="状态流转过程" tabindex="-1"><a class="header-anchor" href="#状态流转过程"><span>状态流转过程</span></a></h3><ul><li><strong>初始流转</strong>：线程对象创建（<code>NEW</code>） → 调用 <code>start()</code> 方法 → 进入 RUNNABLE 状态（此时线程可运行，但需等待 CPU 调度）。</li><li><strong><code>RUNNABLE</code> 到其他状态</strong>： <ul><li><code>BLOCKED</code>：当线程尝试获取锁但锁不可用（例如，在 <code>synchronized</code> 块中竞争失败）。</li><li><code>WAITING</code>：当调用 <code>wait()</code> 方法（需在持有锁的上下文中调用）。</li><li><code>TIMED_WAITING</code>：当调用 <code>sleep()</code> 或带超时的 <code>wait()</code> 方法。</li></ul></li><li><strong>其他状态回转到 <code>RUNNABLE</code></strong>： <ul><li><code>BLOCKED</code> → <code>RUNNABLE</code>：当锁被释放且线程成功获取锁。</li><li><code>WAITING</code> → <code>RUNNABLE</code>：当其他线程调用 <code>notify()</code> 或 <code>notifyAll()</code> 唤醒该线程。</li><li><code>TIMED_WAITING</code> → <code>RUNNABLE</code>：当计时结束或线程被唤醒。</li></ul></li><li><strong>终止流转</strong>：<code>RUNNABLE</code> → <code>TERMINATED</code>：当 <code>run()</code> 方法正常结束或线程被中断（如调用 <code>interrupt()</code>）。线程一旦进入 TERMINATED 状态，便无法恢复。</li></ul><p>状态流转图可简化为：</p>',7)),l(a,{code:"eJwrLkksSXXJTEwvSszVLTPiUgCCaK1YBV1dOwU/13AFK4WnHbOf7t71fNf+5yu6n67f+WLjQrAikCRIUVCon5+jk48rUOWLDc3Pp6xQABpZVKKhCVYFJuBKQOqdfPydvV1dQAZvmPti/dQXfduf9k97OaXx6ZKNL7YsVdAorsxLzijKz8usSk2BGIKiP9zRM8TTzx1hXXliJsw2FIUhnr6uLvEYyotzUlMLNDQV9CEaSzJzU/NLSzS5wAbAHIfuMbAbn3ZsADoTrA5mKrq6RasV8vJLMtMqNTT1IQzHnBygZU+nLHnZNgmsFdVZ6AZsa302fdvz3ZOfzZ3/rGMa0DyoTizecw3y9fRzDAEHZVFpHtCWZ53LXyzsebqu59n6qUD/ZeaVpBYVlRbAQgdJB8gAYCxzcQEAcvS18Q=="}),s[1]||(s[1]=i(`<h2 id="线程创建" tabindex="-1"><a class="header-anchor" href="#线程创建"><span>线程创建</span></a></h2><h3 id="创建线程的方式" tabindex="-1"><a class="header-anchor" href="#创建线程的方式"><span>创建线程的方式</span></a></h3><p>Java 提供了多种创建线程的机制，每种方式适用于不同场景。以下是四种标准方法：</p><ol><li><p><strong>继承 <code>Thread</code> 类</strong></p><ul><li>定义一个新类继承 <code>java.lang.Thread</code>。</li><li>重写 <code>run()</code> 方法，实现线程任务逻辑。</li><li>通过 <code>new MyThread().start()</code> 启动线程。</li><li><strong>优点</strong>：简单易用；<strong>缺点</strong>：Java 不支持多重继承，限制了扩展性。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyThread</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	  // 线程逻辑</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>实现 <code>Runnable</code> 接口</strong></p><ul><li>实现 <code>java.lang.Runnable</code> 接口，定义 <code>run()</code> 方法。</li><li>将 Runnable 对象传递给 <code>Thread</code> 构造函数。</li><li>调用 <code>Thread.start()</code> 启动线程。</li><li><strong>优点</strong>：避免继承限制，更灵活，支持资源共享；<strong>缺点</strong>：无返回值。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyRunnable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Runnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	  // 线程逻辑</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyRunnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>实现 <code>Callable</code> 接口结合 <code>FutureTask</code></strong></p><ul><li>实现 <code>java.util.concurrent.Callable&lt;V&gt;</code> 接口，重写 <code>call()</code> 方法（可返回结果或抛出异常）。</li><li>将 <code>Callable</code> 对象包装在 <code>FutureTask</code> 中（<code>FutureTask</code> 实现了 <code>Runnable</code> 接口）。</li><li>通过 <code>Thread</code> 或线程池执行 FutureTask。</li><li><strong>优点</strong>：支持返回值（通过 <code>FutureTask.get()</code> 获取结果）和异常处理；<strong>缺点</strong>：代码稍复杂。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyCallable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Callable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Exception </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">	  // 线程逻辑，返回结果 </span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	  return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">result</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FutureTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> task</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FutureTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;(</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyCallable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">task</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> task</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 获取返回值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>通过线程池创建线程</strong></p><ul><li>使用 <code>java.util.concurrent.ExecutorService</code> 框架（如 <code>Executors</code> 工厂类）。</li><li>创建线程池（如 <code>Executors.newFixedThreadPool(int nThreads)</code>），提交任务（实现 Runnable 或 Callable）。</li><li><strong>优点</strong>：高效管理线程生命周期，避免频繁创建/销毁线程的开销，支持任务队列和返回值；<strong>缺点</strong>：需注意线程池配置以避免资源耗尽。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ExecutorService</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Executors</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">newFixedThreadPool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">submit</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // Runnable 或 Callable 任务逻辑</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">executor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">shutdown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 关闭线程池</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h2><h3 id="多线程的应用" tabindex="-1"><a class="header-anchor" href="#多线程的应用"><span>多线程的应用</span></a></h3><p>多线程技术广泛应用于提升程序性能和响应性，尤其在处理耗时或并发任务时。关键应用场景包括：</p><ol><li><p><strong>耗时操作的处理</strong></p><ul><li><strong>文件操作</strong>：通过子线程处理大文件拷贝或迁移，避免主线程阻塞（例如，使用后台线程执行文件 I/O，确保 UI 响应流畅）。</li><li><strong>资源加载</strong>：在启动时加载大量资源文件（如图片、配置文件），通过多线程并行加载，加速初始化过程。</li></ul></li><li><p><strong>网络与并发服务</strong></p><ul><li><strong>聊天软件</strong>：每个客户端连接由一个独立线程处理，支持实时消息接收和发送；线程池管理并发连接，提升吞吐量。</li><li><strong>后台服务器</strong>：Web 服务器（如 Tomcat）或微服务框架使用线程池处理 HTTP 请求，实现高并发；数据库连接池也依赖多线程优化查询执行。</li></ul></li></ol>`,8))])}const o=e(d,[["render",k]]),c=JSON.parse('{"path":"/notes/interview/44ys0bo3/","title":"线程","lang":"zh-CN","frontmatter":{"title":"线程","createTime":"2025/08/25 19:35:30","permalink":"/notes/interview/44ys0bo3/"},"readingTime":{"minutes":4.38,"words":1314},"git":{"createdTime":1756719649000,"updatedTime":1756721248000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/JUC/线程.md","headers":[]}');export{o as comp,c as data};
