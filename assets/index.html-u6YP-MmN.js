import{a as s,c as a,b as n,o as e}from"./app-CAzY0Upz.js";const l={};function t(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<p>在测试用例中，避免使用固定的数据是至关重要的。 Spring Boot 提供了一种使用随机值的机制，通过在配置中生成随机数据，可以确保每次程序运行时加载的数据都是不同的。</p><h2 id="_1-yaml-配置中的随机值" tabindex="-1"><a class="header-anchor" href="#_1-yaml-配置中的随机值"><span>1. YAML 配置中的随机值</span></a></h2><p>可以在 <code>application.yml</code> 或 <code>application.properties</code> 配置文件中使用 Spring 的 SpEL (Spring Expression Language) 表达式来生成随机值。以下是一个示例：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">testcase</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  book</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${random.int}</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    id2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${random.int(10)}</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${random.int!5,10!}</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${random.value}</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    uuid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${random.uuid}</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    publishTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${random.long}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置将在每次程序启动时，为 <code>testcase.book</code> 下的各个属性生成随机值。</p><h2 id="_2-使用-configurationproperties-加载随机数据" tabindex="-1"><a class="header-anchor" href="#_2-使用-configurationproperties-加载随机数据"><span>2. 使用 <code>@ConfigurationProperties</code> 加载随机数据</span></a></h2><p>为了将这些随机数据加载到 Java 对象中，可以使用 <code>@ConfigurationProperties</code> 注解。首先，创建一个 Java 类，并使用 <code>@Component</code> 和 <code>@Data</code> 注解，然后使用 <code>@ConfigurationProperties</code> 指定配置的前缀。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Component</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Data</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ConfigurationProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">prefix</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">testcase.book</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BookCase</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> uuid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> publishTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>BookCase</code> 类的属性会自动绑定到 <code>testcase.book</code> 前缀下的配置属性。</p><h2 id="_3-随机值限定规则" tabindex="-1"><a class="header-anchor" href="#_3-随机值限定规则"><span>3. 随机值限定规则</span></a></h2><p>Spring 提供了多种生成随机值的 SpEL 表达式，并且可以对生成的数值进行范围限定：</p><ul><li><p><code>\${random.int}</code>：生成一个随机整数。</p></li><li><p><code>\${random.int(10)}</code>：生成一个 0 到 9 之间的随机整数。</p></li><li><p><code>\${random.int(10,20)}</code>：生成一个 10 到 20 之间的随机整数。</p></li></ul><p>在 <code>\${random.int(10,20)}</code> 中，可以使用任意字符作为分隔符，例如 <code>!</code> 或 <code>[]</code>，<code>\${random.int!10,20!}</code> 与 <code>\${random.int[10,20]}</code> 都是有效的。</p>`,13)]))}const d=s(l,[["render",t]]),k=JSON.parse('{"path":"/notes/HMSpringBoot/1yxzqq7l/","title":"3-5.测试用例数据设定","lang":"zh-CN","frontmatter":{"title":"3-5.测试用例数据设定","createTime":"2025/06/25 12:23:35","permalink":"/notes/HMSpringBoot/1yxzqq7l/"},"readingTime":{"minutes":1.35,"words":406},"git":{"createdTime":1752578290000,"updatedTime":1752578290000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员SpringBoot/3.开发实用篇/3.测试/3-5.测试用例数据设定.md","headers":[]}');export{d as comp,k as data};
