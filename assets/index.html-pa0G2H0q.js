import{a as i,c as a,b as e,o as t}from"./app-CAzY0Upz.js";const n="/blog/assets/2-4.yaml%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96-20250619151317209-BoOOukVk.png",l="/blog/assets/2-4.yaml%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96-20250619151554952-CLCewR_9.png",r="/blog/assets/2-4.yaml%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96-20250619152751495-BUar3Rt_.png",d="/blog/assets/2-4.yaml%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96-20250619152828000-Be0Z76bC.png",p={};function h(o,s){return t(),a("div",null,s[0]||(s[0]=[e('<p>YAML 文件可以被视为小型数据库，用于存储具有独立名称的数据。</p><h2 id="_1-读取单一数据" tabindex="-1"><a class="header-anchor" href="#_1-读取单一数据"><span>1. 读取单一数据</span></a></h2><p>可以使用 Spring 的 <code>@Value</code> 注解直接读取 YAML 文件中的单个数据。属性名引用格式为 <code>${一级属性名.二级属性名...}</code>。</p><img src="'+n+'" alt="2-4.yaml数据读取-20250619151317209" width="750" style="display:block;margin:auto;"><p>使用 <code>@Value</code> 注解时，需要将其应用于由 Spring 管理的 Bean 的属性上。</p><h2 id="_2-读取全部数据" tabindex="-1"><a class="header-anchor" href="#_2-读取全部数据"><span>2. 读取全部数据</span></a></h2><p>当 YAML 文件中定义的数据量过大时，逐个使用 <code>@Value</code> 注解读取数据会非常繁琐。SpringBoot 提供了一个 <code>Environment</code> 对象，可以将所有 YAML 数据封装到该对象中。</p><img src="'+l+'" alt="2-4.yaml数据读取-20250619151554952" width="750" style="display:block;margin:auto;"><p>通过自动装配注解 <code>@Autowired</code> 可以将所有 YAML 数据封装到 <code>Environment</code> 对象中。通过 <code>Environment</code> 对象的 <code>getProperty(String)</code> 方法获取属性值，参数为属性名。</p><h2 id="_3-读取对象数据" tabindex="-1"><a class="header-anchor" href="#_3-读取对象数据"><span>3. 读取对象数据</span></a></h2><p>为了更方便地管理和使用数据，可以将一组 YAML 对象数据封装到一个 Java 对象中。</p><p>首先，定义一个 Java 对象，并将其声明为一个 Spring Bean。然后，使用 <code>@ConfigurationProperties</code> 注解指定该对象加载 YAML 文件中哪一组配置信息。</p><img src="'+r+'" alt="2-4.yaml数据读取-20250619152751495" width="750" style="display:block;margin:auto;"><p><code>@ConfigurationProperties</code> 注解需要指定加载的数据前缀，该前缀下的所有属性将被封装到该对象中。数据属性名需要与 Java 对象的变量名一一对应，以便正确封装数据。</p><img src="'+d+`" alt="2-4.yaml数据读取-20250619152828000" width="750" style="display:block;margin:auto;"><p>Spring Boot 在绑定配置文件（如 <code>application.yml</code> 或 <code>application.properties</code>）中的属性时，<strong>不要求严格的变量命名匹配</strong>。它可以自动识别并转换以下不同的命名风格：</p><table><thead><tr><th>配置格式（YAML/Properties）</th><th>Java 字段名</th></tr></thead><tbody><tr><td><code>driver-class-name</code></td><td><code>driverClassName</code></td></tr><tr><td><code>driver_class_name</code></td><td><code>driverClassName</code></td></tr><tr><td><code>driverClassName</code></td><td><code>driverClassName</code></td></tr><tr><td><code>driverclassname</code></td><td><code>driverClassName</code></td></tr></tbody></table><p>Spring Boot 会自动将这些风格的名称“松散”地匹配到 Java Bean 中定义的驼峰式字段名上。Spring Boot 使用了 <code>Binder</code> 类来完成配置绑定工作，其中包含了对各种命名风格的解析器，如：</p><ul><li><code>KebabCase</code>（短横线风格） → <code>driver-class-name</code></li><li><code>SnakeCase</code>（下划线风格） → <code>driver_class_name</code></li><li><code>CamelCase</code>（驼峰命名） → <code>driverClassName</code></li></ul><p>这些都会在底层通过转换规则统一成驼峰命名，然后映射到 Java 类的字段上。继续深入了解可以查看 Spring Boot 的官方文档中关于 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.spring-application.name" target="_blank" rel="noopener noreferrer">Relaxed Binding</a> 的部分。</p><h2 id="_4-yaml-文件中的数据引用" tabindex="-1"><a class="header-anchor" href="#_4-yaml-文件中的数据引用"><span>4. YAML 文件中的数据引用</span></a></h2><p>在编写 YAML 数据时，如果多个属性具有相同的前缀，可以使用引用格式来定义数据，避免重复书写。如：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">	dataDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/fire/data</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    tmpDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/fire/tmp</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    logDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/fire/log</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    msgDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/fire/msgDir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则可以定义 <code>baseDir</code> 为共同的前缀：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">baseDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/fire</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">center</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    dataDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${baseDir}/data</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    tmpDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${baseDir}/tmp</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    logDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${baseDir}/log</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    msgDir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${baseDir}/msgDir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>\${属性名}</code> 方式引用属性值。</p><p><strong>注意：</strong> 在书写字符串时，如果需要使用转义字符，需要将数据字符串使用双引号包裹起来。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">lesson</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Spring</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">boot</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">lesson</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,28)]))}const k=i(p,[["render",h]]),g=JSON.parse('{"path":"/notes/HMSpringBoot/5auo45zt/","title":"2-4.yaml数据读取","lang":"zh-CN","frontmatter":{"title":"2-4.yaml数据读取","createTime":"2025/07/15 23:02:20","permalink":"/notes/HMSpringBoot/5auo45zt/"},"readingTime":{"minutes":2.84,"words":851},"git":{"createdTime":1752578290000,"updatedTime":1752637938000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":2,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/黑马程序员SpringBoot/1.基础篇/2.SpringBoot基础配置/2-4.yaml数据读取.md","headers":[]}');export{k as comp,g as data};
