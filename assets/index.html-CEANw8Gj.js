import{a as d,c as l,b as i,d as o,r as a,o as n}from"./app-CAzY0Upz.js";const t={};function r(c,e){const s=a("Mermaid");return n(),l("div",null,[e[0]||(e[0]=i('<h2 id="基于-redis-的-set-nx-ex-px-命令" tabindex="-1"><a class="header-anchor" href="#基于-redis-的-set-nx-ex-px-命令"><span>基于 Redis 的 <code>SET NX EX PX</code> 命令</span></a></h2><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h3><p>基于 Redis 的 <code>SET</code> 命令并结合如下参数，可以实现一个简单的分布式锁。</p><ul><li><code>NX</code>：只在键不存在时设置</li><li><code>EX</code>：设置键的过期时间，单位秒</li><li><code>PX</code>：设置键的过期时间，单位毫秒</li></ul><h3 id="加锁操作" tabindex="-1"><a class="header-anchor" href="#加锁操作"><span>加锁操作</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SET</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> unique_key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">clientId+threadId</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> NX</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> EX</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TTL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>参数说明</strong>： <ul><li><code>unique_key</code>：业务唯一标识</li><li><code>NX</code>：仅当 Key 不存在时设置</li><li><code>EX</code>：设置过期时间（秒）</li><li><code>TTL</code>：锁自动释放时间（秒）</li></ul></li><li><strong>结果</strong>： <ul><li>返回 <code>1</code>/<code>ok</code>：加锁成功</li><li>返回 <code>0</code>/<code>nil</code>：加锁失败（锁已被占用）</li></ul></li></ul><h3 id="释放锁操作" tabindex="-1"><a class="header-anchor" href="#释放锁操作"><span>释放锁操作</span></a></h3><p>释放锁需要确保是当前持有锁的客户端才能释放，以防止误删。</p><ol><li><strong>获取锁的 <code>value</code></strong>：首先 <code>GET unique_key</code> 获取当前锁的 <code>value</code>。</li><li><strong>判断归属</strong>：将获取到的 <code>value</code> 与当前客户端的 <code>unique_value</code>（机器码 + 线程 ID）进行比较。</li><li><strong>条件删除</strong>： <ul><li>如果两者匹配，说明是当前客户端持有的锁，执行 <code>DEL unique_key</code> 命令释放锁。</li><li>如果两者不匹配，说明锁已被其他客户端持有或已过期被其他客户端获取，当前客户端不应执行删除操作。</li></ul></li></ol><p>::：example 锁提前释放导致并行</p><ul><li><p><strong>场景</strong>：</p><ol><li>线程 1 获取锁，因业务阻塞未及时释放。</li><li>锁 TTL 到期，Redis 自动删除键，锁释放，线程 2 获取锁。</li><li>线程 1 恢复运行，未检查锁归属，直接删除锁。</li><li>线程 3 获取锁，与线程 2 并行执行，导致数据不一致或并发问题。</li></ol></li><li><p><strong>解决方案</strong>：在释放锁前检查锁的值是否为当前线程的标识符（如 <code>Thread1_ID</code>），确保只有锁的持有者才能删除锁。</p></li></ul>',12)),o(s,{code:"eJyNkctOwkAUhtf2KWapiSxo96xcGheGF5jARBsVsFQTd5CYUAtyiQQQL1yCgZgoLow3CLyMZ9queAWHTkkb7SR21Znz/ef8558sOT4hqQTZUvGeho+ktQzWdDWhZnBKR7skqWYRzvIfCbEvWI7vawQno0vA+ppbo2JUgMg+IgsQxUcUyWW87pFYzJ2+mLbt8jtUGk4979bd2wgreyADWIkz1KiC2XGxnbROUPqUaKuGjPv+aIPZc1oT6N3DNAfD4i90NTEe30ZgvNDbzmJasguPYI7A6DrXA3RAztA6m+cUTFqfbQQcy/91LAsc+218jl4M7V7J852b2LOacDm+ljW5ondL1zTfh8GlPa8yvavBhzqizS4YA9p4YoB180rLD3ytldPw/IOr2+MxO3pvarXPmZKHIHgaruVb/gnOH6cIwwvpqwgCDEtG3vQ18PkGlRqPlAXgNJ+dfovdWHWuJ6mk9AOph2xC"}),e[1]||(e[1]=i('<p>:::</p><h3 id="原子性保证-lua-脚本" tabindex="-1"><a class="header-anchor" href="#原子性保证-lua-脚本"><span>原子性保证（Lua 脚本）</span></a></h3><p>为了防止在“判断锁归属”和“删除锁”这两个操作之间，锁因过期而被其他客户端获取，导致误删，这两个操作必须是原子性的。Redis 保证原子性的最佳实践是使用 Lua 脚本。</p><p>::：example 锁检查与删除的非原子性导致并行</p><ul><li><p><strong>场景</strong>：</p><ol><li>线程 1 获取锁，检查锁归属后因 Full GC 阻塞。</li><li>锁 TTL 到期，Redis 删除键，锁释放，线程 2 获取锁。</li><li>线程 1 恢复运行，因之前已检查锁归属，直接删除锁（误删线程 2 的锁）。</li><li>线程 3 获取锁，与线程 2 并行执行，导致并发问题。</li></ol></li><li><p><strong>解决方案</strong>：使用 Redis Lua 脚本原子性地执行锁归属检查和删除操作，确保检查与删除之间无中断，防止误删。</p></li></ul>',5)),o(s,{code:"eJyNkktLQkEUx9f5KWZpkAt1rZukCKJFuJeLDiXe1HxBO4VAM1+llPnWDCVIa9PL15fxzL135VdovHPlSjnQrIZzfnMe//+E8XkU+93Y4RVOQsKZYSsohCJetzco+CPoGHu8YSSE2cWA6FlPO09DWPCYl4D0PZP612YOYtERCwex6ojVoDJadZPdrnZfjCty7gPyd0opoebVqImmNZACNMUYkipAuqliR4EIRoEYDq0KUm7+WYF0W4mP5OkNuerJ7QynI3mMk+YT8uELmxhw+1z0gqTKJcTHvBHkWQmqDRQTxCi2aWHXgQMZ6WwwuYW3htQeyIPuNnc4qLbQXlQU0f4uUsojaDd+oavhnM5DBKlXUmsuxhk5+QzpPqRaykN3Oa/aUEmmSWnKWmlO/FdOC0dOvYzOMQnXReUuxxaSRkVSX05NEh3oZuVZYWWBIEaQUm9ArgkvBRLvkWJ2Pqmpqc0O6RvrDhnl4ZDGtQ9H/aKLMBE4prEibMs/wul9rVzxNtS1cgTcpIxlR38DX++Q134lVUi5HyidMo1IJfYe+z2GH51Drls="}),e[2]||(e[2]=i('<p>:::</p><h3 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题"><span>存在的问题</span></a></h3><ol><li><strong>业务执行耗时过长导致锁提前释放</strong>：如果业务逻辑执行时间超过了锁的 <code>TTL</code>，锁会自动释放，其他线程可能会获取到锁，导致多个线程并行执行，违反了锁的互斥性。</li><li><strong>不可重入性</strong>：基于 <code>SET NX EX</code> 实现的锁是不可重入的。如果同一个线程在持有锁的情况下再次尝试获取锁，会因为 <code>NX</code> 规则而失败。</li><li><strong><code>TTL</code> 设置困难</strong>：合理设置 <code>TTL</code> 是一个挑战。<code>TTL</code> 过短可能导致锁提前释放，<code>TTL</code> 过长则可能增加死锁的风险（尽管有自动过期）。业务执行时间的不确定性使得精确设置 <code>TTL</code> 变得困难。</li><li><strong>主从架构下的数据不一致问题 (Redisson 解决方案)</strong>：在 Redis 主从复制架构中，如果客户端在主节点上成功获取锁，但在锁数据同步到从节点之前主节点宕机，且从节点被提升为新的主节点，那么新的主节点上将不存在该锁，其他客户端可能会再次获取到锁，导致锁失效。</li></ol><h2 id="基于-redisson-的分布式锁" tabindex="-1"><a class="header-anchor" href="#基于-redisson-的分布式锁"><span>基于 Redisson 的分布式锁</span></a></h2><p>Redisson 是一个功能强大且成熟的 Java 版 Redis 客户端，提供了多种分布式对象和服务，包括分布式锁。它解决了原生 <code>SET NX EX</code> 方案的诸多痛点。</p><h3 id="redisson-可重入锁原理" tabindex="-1"><a class="header-anchor" href="#redisson-可重入锁原理"><span>Redisson 可重入锁原理</span></a></h3><p>Redisson 的分布式锁默认是可重入的，这意味着同一个线程可以多次获取同一把锁，而不会造成死锁。</p><h4 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h4><p>Redisson 利用 Redis 的 Hash 结构来记录锁的持有者和重入次数。</p><ul><li><strong>Hash 结构</strong>：<code>key</code> (锁的名称) -&gt; <code>field</code> (客户端 ID + 线程 ID) -&gt; <code>value</code> (重入次数)。</li></ul><h4 id="获取锁的逻辑" tabindex="-1"><a class="header-anchor" href="#获取锁的逻辑"><span>获取锁的逻辑</span></a></h4><p>Redisson 内部通过 Lua 脚本实现原子性操作：</p><ul><li>判断锁的 <code>key</code> 是否存在（即是否有线程持有锁）。</li><li>如果 <code>key</code> 不存在，说明当前没有线程持有锁，则当前线程成功获取锁。此时，设置 Hash 结构：<code>HSET key (clientId + &quot;:&quot; + threadId) 1</code>，并设置锁的过期时间。</li><li>如果 <code>key</code> 存在，说明已有线程持有锁。 <ul><li>判断持有锁的 <code>field</code>（客户端 ID + 线程 ID）是否是当前线程。</li><li>如果是当前线程，则重入次数加 1：<code>HINCRBY key (clientId + &quot;:&quot; + threadId) 1</code>，并重新设置锁的过期时间。</li><li>如果不是当前线程，则获取锁失败，当前线程进入等待队列。</li></ul></li></ul>',13)),o(s,{code:"eJxLL0osyFAIceFSAALH6Kd7Gp4u737Rt/1p/7SXUxpjFXR17RScqp92LHk2bS1Q4PmsFoXs1EqFZzPWP52w7OnaGU/nrKgF63UCKlV4sqMXIgbW5xz9dO/kp529z3ftf74CyVCwemewEpfoF+v2Pd+7TsEjsThD4fnuyc/mtUDkXcDyrlB5iNUv9rc/mzP/2fRtL6dvgahyBatyi4Yb/qxjwtOu+RBJhLuQHOUO9YxCWmZqTgrUI0927EJ2KsRH7iCdQHmwNo/ol+29T1uXPluz8NnUDQrahhArPMCSniDJZ9M24HerJ8StCKeBLQAGGcwOL4Q3ni7Z+GLLUog+L7CkN2pg7p8NdMzztZ1P97W+nDH/acf0WC4AqS/bfg=="}),e[3]||(e[3]=i('<h4 id="释放锁的逻辑" tabindex="-1"><a class="header-anchor" href="#释放锁的逻辑"><span>释放锁的逻辑</span></a></h4><p>Redisson 同样通过 Lua 脚本实现原子性操作：</p><ul><li>判断锁的 <code>key</code> 是否存在，以及持有锁的 <code>field</code> 是否是当前线程。</li><li>如果不是当前线程持有锁，则直接返回，不进行任何操作。</li><li>如果是当前线程持有锁，则将重入次数减 1：<code>HINCRBY key (clientId + &quot;:&quot; + threadId) -1</code>。</li><li>如果重入次数减为 0，说明当前线程完全释放了锁，则删除整个 <code>key</code>，释放锁资源，并通知等待队列中的其他线程尝试获取锁。</li><li>如果重入次数不为 0，仅更新过期时间（因为锁仍然被当前线程持有）。</li></ul>',3)),o(s,{code:"eJxNkM1OwkAUhfc8xbxAE90bErGA7N1NWGjEn+jCsDPEBBObFrGGxNJWIFYTqsRYZdGQBpW+zNwZ5i0cZ/jpLOec+5177nF9/+IE7ek5JN42hp8mvLW5eUudGXeuq0jT8qjQAGtI3Uh8sN4NOqtdIup/QecVIh8Go62Dep4kDjo6rZ0fLhSSTOH3AVo2m6Zs1L6S+IKgIZLYwiK5O5j1Y3ofzlMH+k/VtWdp0DE3bTBC+vFCu2OkbSqPLsViIyuuYtGGCitmQSUM1jN/HNJuTJL3/waKVJJqGfNmjwUhi1owM7gfgOWRJBJdwZiQb1d1UBNlObErFlucCD7vqNVRoszMFKxgKgq6Y3W4eWrSQUC9Cfdi5a8oWO4PCHO8cQ=="}),e[4]||(e[4]=i('<h3 id="超时续约机制-看门狗-watchdog" tabindex="-1"><a class="header-anchor" href="#超时续约机制-看门狗-watchdog"><span>超时续约机制（看门狗 WatchDog）</span></a></h3><p>Redisson 引入了“看门狗”机制来解决原生 <code>SET NX EX</code> 方案中 <code>TTL</code> 设置困难和锁提前释放的问题。</p><h4 id="机制原理" tabindex="-1"><a class="header-anchor" href="#机制原理"><span>机制原理</span></a></h4><ol><li>当 Redisson 客户端获取锁时，如果未显式指定 <code>TTL</code>，Redisson 会默认使用一个 <code>leaseTime</code>（默认 30 秒）。</li><li>Redisson 会启动一个后台线程（WatchDog），它是一个定时任务。</li><li>这个后台线程会每隔 <code>leaseTime / 3</code>（默认 10 秒）检查一次当前线程是否仍然持有该锁。</li><li>如果锁仍然被当前线程持有，WatchDog 会通过 Lua 脚本重置锁的 <code>TTL</code>，将其延长至默认的 <code>leaseTime</code>（30 秒）。这个过程被称为“续期”。</li><li>这个续期过程会一直持续，直到当前线程显式释放锁，或者线程崩溃导致无法续期。</li></ol><p>这样，即使业务执行时间非常长，只要线程没有崩溃，锁就不会因为 <code>TTL</code> 到期而被强制释放，从而保证了锁的有效性，避免了锁提前释放导致的多线程并行问题。</p>',5)),o(s,{code:"eJxVkUtLAlEUx/d9ivsFpMBtCPl+tRNaXFxYiAZFYbWSQEnwkS9yEhlGBHtoD2dcFIbj48t4z51Z+RW63qs5zeow5/8/5/c/N5GKXSZRxLmD2HeAidqFwoh+aGTYNrRHozoitaYpZaPIZnMgZxpaGqm/QmtGJjUo54kqo0gkfMvdTqZBrMulLryYzqnUN/WWoT6js3jsKh45PY8vJ7J9j/YeolsLm8kt7rVFzKVybjVa6Fxc4MF/PFCok1JHNN2iyWsPr72Y1DVS6qOj2PVJ0n2RYFhVUhvS8Zz274XLy5U+DFrNlKUt4K4dwVMGOi9C5uMyf5pMG6RYEQPWRyhnQSkyFpHeb40SwGZGNuZ5FL6JISMng/Jp5it0qq4iocXPGFmOEOCWIKb6AJQOUcss3HJSpnqP/SGzd1rVrERBAb5dujl5KP0Pj7+RmS+BNGOQ+8cpBxSaQkG+3mB8J7hDVu4wJlkFBl2BwiCYk8VgtdjNxZt9AiHM60MM31k2meoNaDPxL2a0FmM="}),e[5]||(e[5]=i('<h3 id="主从架构下的数据不一致问题及解决方案" tabindex="-1"><a class="header-anchor" href="#主从架构下的数据不一致问题及解决方案"><span>主从架构下的数据不一致问题及解决方案</span></a></h3><p>即使有了 Redisson 的看门狗机制，在 Redis 主从复制架构下，仍然存在数据一致性问题，即主节点宕机但锁数据未同步到从节点时，可能导致锁失效。</p><h4 id="问题重述" tabindex="-1"><a class="header-anchor" href="#问题重述"><span>问题重述</span></a></h4><p>在 Redis 主从复制架构中，Redisson 分布式锁可能面临数据未同步导致的线程安全问题。具体表现为：</p><ol><li><strong>主节点宕机与数据丢失</strong>：当 Redisson 客户端在 Redis 主节点上成功获取锁后，如果该锁数据尚未及时同步到从节点，此时主节点发生宕机。</li><li><strong>新主节点选举与锁失效</strong>：原主节点宕机后，一个从节点会被提升为新的主节点。由于新主节点没有同步到原主节点上的锁数据，它会认为该锁处于未被占用的状态。</li><li><strong>重复加锁与线程安全隐患</strong>：此时，其他客户端或线程可能会在新主节点上重新获取到本应已被占用的锁，导致多个线程同时持有同一个逻辑锁，从而破坏了分布式锁的互斥性，引发严重的线程安全问题。</li></ol><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h4><p>为了解决这个问题，Redisson 提供了两种高级的分布式锁方案：<code>RedissonMultiLock</code> (联锁) 和 <code>RedissonRedLock</code> (红锁)。</p><ol><li><p><strong><code>RedissonMultiLock</code> (联锁)</strong></p><ul><li><strong>条件</strong>：只有当在<strong>所有</strong> Redis 实例上都成功获取锁时，整个联锁才算成功。</li><li><strong>失败处理</strong>：如果在任何一个实例上获取锁失败，或者在获取过程中出现异常，它会立即释放所有已经成功获取的锁，并宣告联锁失败。</li><li><strong>优点</strong>：提供了最高的安全性，只要有一个 Redis 实例正常工作，就能保证锁的互斥性。</li><li><strong>缺点</strong>：性能开销较大，且可用性相对较低（任何一个实例故障都可能导致联锁失败）。</li></ul></li><li><p><strong><code>RedissonRedLock</code> (红锁)</strong></p><ul><li><strong>条件</strong>：客户端尝试在<strong>所有</strong> Redis 实例上并行获取锁。当且仅当在<strong>大多数</strong>（N/2 + 1）Redis 实例上成功获取锁时，且获取锁的总耗时小于锁的有效时间，才认为成功获取红锁。</li><li><strong>失败处理</strong>：如果未能获取到大多数锁，或者获取锁耗时过长，客户端会立即释放所有已经成功获取的锁。</li><li><strong>优点</strong>：提供了比单实例更高的可用性和安全性，即使少量 Redis 实例故障，也能保证锁的正常工作。</li><li><strong>缺点</strong>：部署和维护成本更高，需要多个独立的 Redis 实例。在极端网络分区情况下，仍然可能存在理论上的风险（尽管概率极低）。</li></ul></li></ol><p>这两种方案通过在多个独立的 Redis 节点上进行操作，大大增强了分布式锁的健壮性和可靠性，解决了单点故障带来的数据不一致问题。</p>',9))])}const p=d(t,[["render",r]]),g=JSON.parse('{"path":"/notes/interview/rk6e67y1/","title":"分布式锁","lang":"zh-CN","frontmatter":{"title":"分布式锁","createTime":"2025/09/01 14:52:39","permalink":"/notes/interview/rk6e67y1/"},"readingTime":{"minutes":10.56,"words":3169},"git":{"createdTime":1756721248000,"updatedTime":1756721248000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Redis/分布式锁.md","headers":[]}');export{p as comp,g as data};
