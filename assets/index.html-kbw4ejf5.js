import{a as e,c as o,b as r,o as d}from"./app-CAzY0Upz.js";const l={};function s(n,t){return d(),o("div",null,t[0]||(t[0]=[r('<p>在 Java 中，<code>throw</code> 和 <code>throws</code> 都是用于异常处理的关键字，但它们在功能和使用场景上存在显著差异。</p><h2 id="throw-关键字" tabindex="-1"><a class="header-anchor" href="#throw-关键字"><span><code>throw</code> 关键字</span></a></h2><ol><li><strong>作用</strong>：<code>throw</code> 关键字用于在方法内部<strong>主动抛出一个异常对象</strong>。它是一个动作，表示“抛出”一个具体的异常实例。</li><li><strong>语法</strong>：<code>throw new 异常类(&quot;错误信息&quot;);</code></li><li><strong>使用场景</strong>：当程序在运行时检测到某种错误条件，并且该条件需要被识别并作为异常处理时，开发者会主动创建并抛出一个异常实例。例如，参数校验失败、文件未找到等。</li><li><strong>关键点</strong>： <ul><li><code>throw</code> 后面必须跟随一个具体的<strong>异常对象实例</strong>（例如：<code>new IllegalArgumentException(&quot;参数无效&quot;)</code>）。</li><li>一旦 <code>throw</code> 语句被执行，当前方法的执行将立即终止，<code>throw</code> 语句后面的代码将不再执行。</li><li><code>throw</code> 可以抛出任何类型的异常，包括受检异常（Checked Exception）和非受检异常（Unchecked Exception）。如果抛出的是受检异常，那么该方法必须在其签名中使用 <code>throws</code> 关键字声明这个异常，或者在方法内部捕获并处理它。</li></ul></li></ol><h2 id="throws-关键字" tabindex="-1"><a class="header-anchor" href="#throws-关键字"><span><code>throws</code> 关键字</span></a></h2><ol><li><strong>作用</strong>：<code>throws</code> 关键字用于在<strong>方法签名中声明</strong>该方法可能抛出的异常类型。它是一个声明，表示“这个方法可能会抛出”某些类型的异常。</li><li><strong>语法</strong>：<code>返回类型 方法名(参数列表) throws 异常类1, 异常类2... { ... }</code></li><li><strong>使用场景</strong>：当方法内部可能抛出受检异常，但当前方法不打算捕获并处理这些异常时，而是选择将异常的责任传递给调用者。</li><li><strong>关键点</strong>： <ul><li><code>throws</code> 后面跟随的是一个或多个<strong>异常类名</strong>，多个异常类之间用逗号 <code>,</code> 分隔。</li><li><code>throws</code> 主要用于声明<strong>受检异常</strong>。如果一个方法声明了可能抛出受检异常，那么调用该方法的代码必须要么使用 <code>try-catch</code> 块捕获并处理这些异常，要么在其自己的方法签名中继续使用 <code>throws</code> 声明这些异常。</li><li>对于非受检异常（如 <code>RuntimeException</code> 及其子类），通常不需要在 <code>throws</code> 子句中声明，因为它们被认为是程序逻辑错误，编译器不会强制要求处理。</li></ul></li></ol><h2 id="总结对比" tabindex="-1"><a class="header-anchor" href="#总结对比"><span>总结对比</span></a></h2><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;"><code>throw</code> 关键字</th><th style="text-align:left;"><code>throws</code> 关键字</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>位置</strong></td><td style="text-align:left;">方法体内部</td><td style="text-align:left;">方法签名中</td></tr><tr><td style="text-align:left;"><strong>作用</strong></td><td style="text-align:left;">抛出一个异常对象实例</td><td style="text-align:left;">声明方法可能抛出的异常类型</td></tr><tr><td style="text-align:left;"><strong>数量</strong></td><td style="text-align:left;">每次只能抛出一个异常</td><td style="text-align:left;">可以声明多个异常类，用 <code>,</code> 分隔</td></tr><tr><td style="text-align:left;"><strong>目的</strong></td><td style="text-align:left;">立即终止当前执行流程，并抛出异常</td><td style="text-align:left;">告知调用者该方法可能抛出的异常，要求其进行处理</td></tr><tr><td style="text-align:left;"><strong>处理</strong></td><td style="text-align:left;">抛出后，由 <code>try-catch</code> 块捕获或由 <code>throws</code> 声明</td><td style="text-align:left;">调用者必须 <code>try-catch</code> 或继续 <code>throws</code> 进行处理</td></tr><tr><td style="text-align:left;"><strong>对象</strong></td><td style="text-align:left;">既可抛出受检异常，也可抛出非受检异常</td><td style="text-align:left;">主要用于声明受检异常，非受检异常通常不声明</td></tr></tbody></table>',7)]))}const c=e(l,[["render",s]]),i=JSON.parse('{"path":"/notes/interview/clt2k3xu/","title":"throw与throws的核心区别","lang":"zh-CN","frontmatter":{"title":"throw与throws的核心区别","createTime":"2025/09/04 18:02:21","permalink":"/notes/interview/clt2k3xu/"},"readingTime":{"minutes":2.66,"words":797},"git":{"createdTime":1757065260000,"updatedTime":1757065260000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Java/Java基础/throw与throws的核心区别.md","headers":[]}');export{c as comp,i as data};
