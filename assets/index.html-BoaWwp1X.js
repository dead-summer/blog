import{a as o,c as s,b as d,o as i}from"./app-CAzY0Upz.js";const l={};function r(a,e){return i(),s("div",null,e[0]||(e[0]=[d('<p>Redis 提供了两种主要的持久化机制：RDB（Redis Database Backup）和 AOF（Append Only File），以确保在 Redis 实例重启后数据不会丢失。在默认配置 <code>redis.conf</code> 中，RDB 是默认开启的，而 AOF 需要手动配置开启。</p><h2 id="rdb" tabindex="-1"><a class="header-anchor" href="#rdb"><span>RDB</span></a></h2><p>RDB 是 Redis DataBase Backup 的缩写，也被称为 Redis 数据快照。它通过将 Redis 在内存中的所有数据以二进制格式保存到磁盘文件中。当 Redis 实例故障重启后，可以通过加载 RDB 文件快速恢复数据。</p><h3 id="触发机制" tabindex="-1"><a class="header-anchor" href="#触发机制"><span>触发机制</span></a></h3><p>RDB 的触发机制分为自动触发和手动触发。</p><ol><li><p><strong>自动触发（<code>bgsave</code>）</strong> 在 <code>redis.conf</code> 配置文件中，可以通过 <code>save</code> 配置项设置 RDB 的自动触发条件：</p><ul><li><code>save 900 1</code>：在 900 秒（15 分钟）内，如果至少有 1 个 key 被修改，则执行 <code>bgsave</code> 命令。</li><li><code>save 300 10</code>：在 300 秒（5 分钟）内，如果至少有 10 个 key 被修改，则执行 <code>bgsave</code> 命令。</li><li><code>save 60 10000</code>：在 60 秒内，如果至少有 10000 个 key 被修改，则执行 <code>bgsave</code> 命令。</li></ul></li><li><p><strong>手动触发</strong></p><ul><li><code>SAVE</code> 命令：由 Redis 主进程执行 RDB 操作。在 RDB 期间，主进程会阻塞所有客户端命令，不建议在生产环境使用。</li><li><code>BGSAVE</code> 命令：开启一个子进程执行 RDB 操作。主进程不会被阻塞，可以继续处理客户端请求。这是推荐的手动触发方式。</li></ul></li></ol><h3 id="rdb-异步持久化的底层原理" tabindex="-1"><a class="header-anchor" href="#rdb-异步持久化的底层原理"><span>RDB 异步持久化的底层原理</span></a></h3><p><code>BGSAVE</code> 命令实现了 RDB 的异步持久化。其核心原理是利用操作系统的 <code>fork()</code> 系统调用创建子进程来执行持久化任务。</p><ol><li><strong><code>fork()</code> 过程</strong>：当执行 <code>BGSAVE</code> 命令时，Redis 主进程会调用 <code>fork()</code> 创建一个子进程。<code>fork()</code> 操作会复制主进程的页表（Page Table），使子进程共享主进程的内存数据。这个 <code>fork()</code> 过程是阻塞的，Redis 主进程在此期间无法处理客户端请求。</li><li><strong>写时复制（Copy-On-Write, COW）</strong>：为了避免主进程在写数据时与子进程读取数据造成冲突，Redis 利用了操作系统的 COW 机制。 <ul><li>在 <code>fork()</code> 完成后，主进程和子进程会共享同一份内存数据，这些内存页被标记为只读。</li><li>当主进程需要修改（写）共享内存中的某个数据页时，操作系统会为这个数据页创建一个副本，主进程在副本上执行写操作。原始的数据页仍然保持不变，供子进程读取。</li><li>子进程在执行 <code>BGSAVE</code> 期间，会读取共享内存（或未被主进程修改而触发 COW 的内存页）中的数据，并将其写入 RDB 文件。</li></ul></li></ol><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><ul><li><p><strong>优点</strong></p><ul><li><strong>恢复速度快</strong>：RDB 文件是一个压缩的二进制文件，加载速度比 AOF 快，适合用于灾难恢复。</li><li><strong>文件体积小</strong>：RDB 文件存储的是数据的最终状态，不包含中间操作，因此文件体积相对较小。</li></ul></li><li><p><strong>缺点</strong></p><ul><li><strong>数据安全性问题</strong>：RDB 是周期性执行的，两次 RDB 之间写入的数据如果 Redis 发生宕机，这部分数据将会丢失。RDB 的执行间隔不能设置过短，因为 <code>fork()</code> 和写 RDB 文件本身是耗时操作。</li><li><strong><code>fork()</code> 阻塞</strong>：<code>fork()</code> 子进程的过程是阻塞的，如果实例内存较大，<code>fork()</code> 操作可能会导致 Redis 在短时间内无法响应请求。</li></ul></li></ul><h2 id="aof" tabindex="-1"><a class="header-anchor" href="#aof"><span>AOF</span></a></h2><p>AOF（Append Only File）是一种“追加文件”持久化方式。它通过记录 Redis 处理的每一个写命令来持久化数据。AOF 文件可以被视为一个命令日志文件，当 Redis 重启时，会重新执行 AOF 文件中的命令来恢复数据。</p><h3 id="aof-刷盘策略" tabindex="-1"><a class="header-anchor" href="#aof-刷盘策略"><span>AOF 刷盘策略</span></a></h3><p>AOF 的刷盘频率可以通过 <code>appendfsync</code> 配置项来设置，这决定了数据写入 AOF 文件的安全性与性能之间的平衡：</p><ul><li><code>always</code>：<strong>同步刷盘</strong>。每个写命令执行后都会立即同步写入 AOF 文件并刷盘。数据安全性最高，但性能开销最大，因为每次写操作都会阻塞直到数据写入磁盘。</li><li><code>everysec</code>（默认）：<strong>每秒刷盘</strong>。写命令先写入 AOF 缓冲区，然后每隔一秒将缓冲区数据写入 AOF 文件并刷盘。这是一个折中方案，性能较好，最多丢失 1 秒的数据。</li><li><code>no</code>：<strong>由操作系统控制</strong>。写命令写入 AOF 缓冲区后，由操作系统决定何时将缓冲区内容写入 AOF 文件。数据安全性最低，完全依赖操作系统，但性能最好。</li></ul><h3 id="aof-文件重写" tabindex="-1"><a class="header-anchor" href="#aof-文件重写"><span>AOF 文件重写</span></a></h3><p>为了解决 AOF 文件体积过大和冗余命令的问题，Redis 提供了 AOF 文件重写（<code>BGREWRITEAOF</code>）功能。</p><p>AOF 重写会创建一个新的 AOF 文件，用最少的命令来达到相同的最终数据状态。例如，对于一个 key 的多次 <code>INCR</code> 操作，重写后可能只记录一个 <code>SET</code> 命令。</p><ul><li><p><strong>触发机制</strong>： AOF 重写可以通过 <code>BGREWRITEAOF</code> 命令手动触发，也可以通过配置文件中的阈值自动触发：</p><ul><li><code>auto-aof-rewritemin-size</code>：AOF 文件最小达到指定大小才会触发重写。</li><li><code>auto-aof-rewrite-percentage</code>：当前 AOF 文件大小比上次重写后文件大小增长的百分比达到指定值时触发重写。</li></ul></li><li><p><strong>重写原理</strong>： AOF 重写过程与 RDB 的 <code>BGSAVE</code> 类似，也是通过 <code>fork()</code> 子进程来完成的。</p><ol><li>主进程 <code>fork()</code> 一个子进程。</li><li>子进程遍历当前内存中的数据，将其转换为一系列写命令，写入到一个临时 AOF 文件中。</li><li>在子进程重写期间，主进程仍然正常处理客户端请求，并将新的写命令追加到旧的 AOF 文件和 AOF 重写缓冲区中。</li><li>当子进程完成重写后，主进程会将 AOF 重写缓冲区中的命令追加到新的 AOF 文件末尾。</li><li>最后，用新的 AOF 文件替换旧的 AOF 文件，完成重写。</li></ol></li></ul><h4 id="优缺点-1" tabindex="-1"><a class="header-anchor" href="#优缺点-1"><span>优缺点</span></a></h4><ul><li><p><strong>优点</strong></p><ul><li><strong>数据安全性高</strong>：<code>everysec</code> 策略最多丢失 1 秒的数据，<code>always</code> 策略几乎不丢失数据。</li><li><strong>日志清晰</strong>：AOF 文件是文本格式，记录的是命令序列，易于理解和解析（在发生错误时进行调试）。</li></ul></li><li><p><strong>缺点</strong></p><ul><li><strong>恢复速度慢</strong>：AOF 文件恢复时需要重新执行所有命令，如果文件较大，恢复时间会很长。</li><li><strong>文件体积大</strong>：AOF 文件记录的是命令，通常比 RDB 文件大。</li></ul></li></ul><h2 id="混合持久化" tabindex="-1"><a class="header-anchor" href="#混合持久化"><span>混合持久化</span></a></h2><p>为了兼顾 RDB 和 AOF 的优点，Redis 4.0 引入了 RDB-AOF <strong>混合持久化</strong> 机制。此机制以 AOF 持久化为基础，当开启混合持久化后，AOF 文件重写时会采用一种特殊的方式：</p><ol><li><strong>RDB 格式开头</strong>：在 AOF 文件重写时，会将当前内存中的所有数据以 <strong>RDB 格式</strong> 写入新 AOF 文件的开头部分。</li><li><strong>AOF 格式追加</strong>：RDB 数据块写入完成后，后续的增量数据（即在重写过程中主进程接收到的写命令）会以 <strong>AOF 格式</strong> 追加到新文件的末尾。</li></ol><p>因此，混合持久化后的 AOF 文件结构是：<code>[RDB 数据块][AOF 命令流]</code>。</p><h3 id="优缺点-2" tabindex="-1"><a class="header-anchor" href="#优缺点-2"><span>优缺点</span></a></h3><ul><li><p><strong>优点</strong></p><ul><li><strong>快速启动</strong>：由于 AOF 文件的开头是 RDB 格式，Redis 启动时可以直接加载 RDB 部分，大大加快了恢复速度。</li><li><strong>数据安全性高</strong>：RDB 部分加载完成后，再执行 AOF 命令流，保证了数据的最新状态，减少了数据丢失的风险（与纯 RDB 相比）。</li><li><strong>文件体积相对较小</strong>：相比于纯 AOF 文件，混合持久化文件在重写后通常更小，因为 RDB 部分是压缩的。</li></ul></li><li><p><strong>缺点</strong></p><ul><li><strong>兼容性问题</strong>：混合持久化后的 AOF 文件格式与旧版 Redis 不兼容，无法向下兼容。</li><li><strong>重写开销</strong>：虽然相比纯 AOF 重写有所优化，但重写过程仍然涉及 <code>fork()</code> 和磁盘 I/O，会消耗一定资源。</li></ul></li></ul>',28)]))}const c=o(l,[["render",r]]),t=JSON.parse('{"path":"/notes/interview/fg6yqgd2/","title":"持久化","lang":"zh-CN","frontmatter":{"title":"持久化","createTime":"2025/09/01 16:13:30","permalink":"/notes/interview/fg6yqgd2/"},"readingTime":{"minutes":6.79,"words":2038},"git":{"createdTime":1756721248000,"updatedTime":1756721248000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/八股文自救指南/Redis/持久化.md","headers":[]}');export{c as comp,t as data};
