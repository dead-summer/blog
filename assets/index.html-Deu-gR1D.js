import{a,c as e,b as n,o as t}from"./app-CAzY0Upz.js";const p="/blog/assets/PPP%E5%8D%8F%E8%AE%AE%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B-QqWKXbIL.png",l="/blog/assets/PPP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%B8%A7%E6%A0%BC%E5%BC%8F-q4MxRMDq.png",o="/blog/assets/PPP%E5%8D%8F%E8%AE%AE%E9%87%87%E7%94%A8%E5%AD%97%E8%8A%82%E5%A1%AB%E5%85%85%E6%B3%95%E5%AE%9E%E7%8E%B0%E9%80%8F%E6%98%8E%E4%BC%A0%E8%BE%93%E7%9A%84%E4%BE%8B%E5%AD%90-D_ctHeHM.png",i="/blog/assets/PPP%E5%8D%8F%E8%AE%AE%E9%87%87%E7%94%A8%E9%9B%B6%E6%AF%94%E7%89%B9%E5%A1%AB%E5%85%85%E6%B3%95%E5%AE%9E%E7%8E%B0%E9%80%8F%E6%98%8E%E4%BC%A0%E8%BE%93%E7%9A%84%E4%BE%8B%E5%AD%90-B9k5JwC_.png",r="/blog/assets/PPP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA-CiauLusz.png",c={};function P(m,s){return t(),e("div",null,s[0]||(s[0]=[n('<p>PPP 协议由因特网工程任务组 (Internet Engineering Task Force, IETF) 于 1992 年制定，目前已成为因特网的正式标准 (RFC1661, RFC1662)。</p><p>PPP 协议主要应用于以下两个方面：</p><ul><li>因特网用户通过点对点链路连接到因特网服务提供商 (Internet Service Provider, ISP)，进而接入因特网。用户计算机与 ISP 通信时通常采用 PPP 协议。</li><li>广域网路由器之间的专用线路。 <img src="'+p+'" alt="PPP协议应用举例" width="750" style="display:block;margin:auto;"> 此外，1999 年还公布了可以在以太网上运行的 PPP 协议 (PPP over Ethernet, PPPoE)，它使得 ISP 可以通过数字用户线路 (Digital Subscriber Line, DSL)、电路调制解调器以及以太网等宽带接入技术，以以太网接口的形式为用户提供接入服务。</li></ul><h2 id="_3-3-1-ppp-协议的组成" tabindex="-1"><a class="header-anchor" href="#_3-3-1-ppp-协议的组成"><span>3.3.1 PPP 协议的组成</span></a></h2><p>PPP 协议由以下三部分组成：</p><ol><li>链路控制协议 (Link Control Protocol, LCP)：LCP 用于建立、配置、测试数据链路的连接以及协商一些选项。</li><li>网络层协议数据单元 (Protocol Data Unit, PDU) 封装到串行链路的方法：网络层 PDU 作为 PPP 帧的数据载荷被封装在 PPP 帧中传输。其长度受 PPP 协议的最大传送单元 (Maximum Transmission Unit, MTU) 的限制。PPP 协议既支持面向字节的异步链路，也支持面向比特的同步链路。</li><li>网络控制协议 (Network Control Protocol, NCP)：NCP 包含多个协议，每个协议分别支持不同的网络层协议，例如 TCP/IP 中的 IP、Novell NetWare 网络操作系统中的 IPX 以及 Apple 公司的 AppleTalk。</li></ol><h2 id="_3-3-2-ppp-协议的帧格式" tabindex="-1"><a class="header-anchor" href="#_3-3-2-ppp-协议的帧格式"><span>3.3.2 PPP 协议的帧格式</span></a></h2><p>PPP 帧由首部、数据载荷和尾部组成。</p><img src="'+l+'" alt="PPP协议的帧格式" width="750" style="display:block;margin:auto;"><ul><li><strong>首部：</strong> 包括标志字段 (Flag, F)、地址字段 (Address, A)、控制字段 (Control, C) 和协议字段 (Protocol, P)。</li><li><strong>数据载荷：</strong> 即信息字段 (Information, I)，可以是网络层 PDU、LCP 分组或 NCP 分组。</li><li><strong>尾部：</strong> 包括帧检验序列 (Frame Check Sequence, FCS) 字段和标志字段 (F)。</li></ul><h3 id="_1-ppp-帧中各字段的含义" tabindex="-1"><a class="header-anchor" href="#_1-ppp-帧中各字段的含义"><span>1. PPP 帧中各字段的含义</span></a></h3><h4 id="_1-ppp-帧首部中的各字段" tabindex="-1"><a class="header-anchor" href="#_1-ppp-帧首部中的各字段"><span>1) PPP 帧首部中的各字段</span></a></h4><ul><li><strong>标志字段 (F)：</strong> 长度为 1 字节，固定取值为 <code>0x7E</code>。位于 PPP 帧的首部和尾部，作为帧的定界符。连续两个标志字段表示一个空帧，应丢弃。</li><li><strong>地址字段 (A)：</strong> 长度为 1 字节，固定取值为 <code>0xFF</code>。</li><li><strong>控制字段 (C)：</strong> 长度为 1 字节，固定取值为 <code>0x03</code>。 地址字段 A 和控制字段 C 目前对 PPP 帧没有实际意义。</li><li><strong>协议字段 (P)：</strong> 长度为 2 字节，用于指示信息字段 I (数据载荷) 的类型： <ul><li><code>0x0021</code>：信息字段 I 是 IP 数据报。</li><li><code>0xC021</code>：信息字段 I 是 PPP 链路控制协议的分组。</li><li><code>0x8021</code>：信息字段 I 是 PPP 网络控制协议的分组。</li></ul></li></ul><h4 id="_2-ppp-帧的数据载荷" tabindex="-1"><a class="header-anchor" href="#_2-ppp-帧的数据载荷"><span>2) PPP 帧的数据载荷</span></a></h4><p>信息字段 I 就是 PPP 帧的数据载荷，其长度可变，最大不能超过 1500 字节，即 PPP 帧的最大传送单元为 1500 字节。</p><h4 id="_3-ppp-帧尾部中的各字段" tabindex="-1"><a class="header-anchor" href="#_3-ppp-帧尾部中的各字段"><span>3) PPP 帧尾部中的各字段</span></a></h4><ul><li><strong>帧检验序列 (FCS)：</strong> 长度为 2 字节，采用循环冗余校验 (Cyclic Redundancy Check, CRC) 计算冗余码，用于 PPP 帧的差错检测。CRC 使用的生成多项式为 CRC-CCITT = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>X</mi><mn>16</mn></msup><mo>+</mo><msup><mi>X</mi><mn>12</mn></msup><mo>+</mo><msup><mi>X</mi><mn>5</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">X^{16} + X^{12} + X^{5} + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</li><li><strong>标志字段 (F)：</strong> 与 PPP 帧首部的标志字段 F 相同，作为帧的定界符。</li></ul><h3 id="_2-ppp-帧的透明传输" tabindex="-1"><a class="header-anchor" href="#_2-ppp-帧的透明传输"><span>2. PPP 帧的透明传输</span></a></h3><p>当 PPP 帧的信息字段的内容中出现了和标志字段相同的内容 <code>0x7E</code>，需要采用相应的措施来实现透明传输，以避免数据被错误地识别为帧的边界。</p><h4 id="_1-字节填充" tabindex="-1"><a class="header-anchor" href="#_1-字节填充"><span>1) 字节填充</span></a></h4><p>当 PPP 协议采用的是面向字节的异步链路时，使用字节填充来实现透明传输 (RFC 1662)。</p><p>具体方法如下：</p><ol><li>将原信息字段中出现的每一个 <code>0x7E</code> 减去 <code>0x20</code> (相当于异或 <code>0x20</code>)，然后在其前面插入转义字符 <code>0x7D</code>。这相当于将原信息字段中出现的每一个 <code>0x7E</code> 字节转换成了 2 字节 (<code>0x7D</code>、<code>0x5E</code>)。</li><li>如果原信息字段中本身就含有转义字符 <code>0x7D</code>，则把每一个 <code>0x7D</code> 减去 <code>0x20</code>，然后在其前面插入转义字符 <code>0x7D</code>。这相当于将原信息字段中出现的每一个 <code>0x7D</code> 字节转换成了 2 字节 (<code>0x7D</code>、<code>0x5D</code>)。</li><li>如果原信息字段中出现 ASCII 码的控制字符 (即数值小于 <code>0x20</code> 的字符)，则将该字符的数值加上 <code>0x20</code> (相当于异或 <code>0x20</code>，将其转换成非控制字符)，然后在其前面插入转义字符 <code>0x7D</code>。例如，出现 <code>0x03</code> (这是控制字符 ETX，即传输结束)，就要将其加上 <code>0x20</code>，然后在其前面插入转义字符 <code>0x7D</code>，也就是将 <code>0x03</code> 转换成了 2 字节 (<code>0x7D</code>、<code>0x23</code>)。 <img src="'+o+'" alt="PPP协议采用字节填充法实现透明传输的例子" width="750" style="display:block;margin:auto;"></li></ol><p>接收方收到 PPP 帧后，进行与发送方字节填充相反的变换，就可以正确地恢复出未经过字节填充的原始 PPP 帧。</p><h4 id="_2-零比特填充" tabindex="-1"><a class="header-anchor" href="#_2-零比特填充"><span>2) 零比特填充</span></a></h4><p>当 PPP 协议采用的是面向比特的同步链路 (例如 SONET/SDH) 时，使用零比特填充来实现透明传输。</p><p>具体方法如下：</p><ul><li>发送方的数据链路层扫描数据载荷，只要出现 5 个连续的比特 1，就在其后填入一个比特 0。经过这种零比特填充后的数据载荷，就可以确保其不会包含帧定界符 (<code>01111110</code>)。</li><li>接收方的数据链路层在把数据载荷向上交付网络层之前，对数据载荷进行扫描，每发现 5 个连续的比特 1 时，就把其后的一个比特 0 删除，这样就可以还原出原始的数据载荷。 <img src="'+i+'" alt="PPP协议采用零比特填充法实现透明传输的例子" width="750" style="display:block;margin:auto;"></li></ul><h2 id="_3-3-3-ppp-协议的工作状态" tabindex="-1"><a class="header-anchor" href="#_3-3-3-ppp-协议的工作状态"><span>3.3.3 PPP 协议的工作状态</span></a></h2><p>PPP 协议的工作状态可以用有限状态机来表示，下面以用户 PC 拨号接入 ISP 的拨号服务器这个过程为例，简要介绍 PPP 协议的工作状态。</p><img src="'+r+'" alt="PPP协议的有限状态机" width="750" style="display:block;margin:auto;"><p>各状态的解释如下：</p><ol><li><strong>静止 (Dead)：</strong> PPP 链路的开始和结束状态。用户 PC 与 ISP 的拨号服务器之间不存在物理层连接。</li><li><strong>建立 (Establish)：</strong> 检测到调制解调器的载波信号并建立物理层连接后，PPP 进入此状态。</li><li><strong>鉴别 (Authenticate)：</strong> 在“建立”状态下，链路控制协议 LCP 开始协商一些配置选项，如最大帧长、鉴别协议等。若协商成功，则进入“鉴别”状态；若协商失败，则退回到“静止”状态。可以使用口令鉴别协议 (Password Authentication Protocol, PAP) 或挑战握手鉴别协议 (Challenge-Handshake Authentication Protocol, CHAP)。</li><li><strong>网络 (Network)：</strong> 若通信双方无须鉴别或鉴别身份成功，则进入“网络”状态；若鉴别失败，则进入“终止”状态。</li><li><strong>打开 (Open)：</strong> 进入“网络”状态后，PPP 链路的两端通过互相交换网络层特定的 NCP 分组来进行 NCP 配置。如果 PPP 链路的上层使用的是 IP 协议，则使用 IP 控制协议 (IP Control Protocol, IPCP) 来对 PPP 链路的每一端配置 IP 模块，例如分配 IP 地址。NCP 配置完成后，就进入“打开”状态。</li><li><strong>数据通信：</strong> 只要链路处于“打开”状态，双方就可以进行数据通信。</li><li><strong>终止 (Terminate)：</strong> 当出现故障或链路的一端发出终止请求时，就进入“终止”状态。</li><li><strong>静止 (Dead)：</strong> 当载波停止后就回到“静止”状态。</li></ol>',33)]))}const h=a(c,[["render",P]]),g=JSON.parse('{"path":"/notes/HNUSTComputerNetwork/qeslqfmv/","title":"3 点对点协议","lang":"zh-CN","frontmatter":{"title":"3 点对点协议","createTime":"2025/06/08 12:58:28","permalink":"/notes/HNUSTComputerNetwork/qeslqfmv/"},"readingTime":{"minutes":7.03,"words":2110},"git":{"createdTime":1752578082000,"updatedTime":1752578082000,"contributors":[{"name":"dead_summer","username":"","email":"2941325451@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/d7f172441d823f01ad688f425860dbe76a31ea11c9936176bbd8c14670a619f8?d=retro"}]},"filePathRelative":"notes/湖科大计算机网络/第3章 数据包链路层/3.3 点对点协议.md","headers":[]}');export{h as comp,g as data};
